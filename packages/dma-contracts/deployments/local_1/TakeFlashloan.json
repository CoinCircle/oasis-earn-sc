{"metadata":"{\"defaultCompiler\":{\"version\":\"0.4.21\"},\"sources\":{\"contracts/actions/common/TakeFlashloan.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Executable } from \\\"../common/Executable.sol\\\";\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { IVault } from \\\"../../interfaces/balancer/IVault.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../interfaces/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../interfaces/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IFlashLoanRecipient } from \\\"../../interfaces/flashloan/balancer/IFlashLoanRecipient.sol\\\";\\nimport { FlashloanData, FlashloanProvider } from \\\"../../core/types/Common.sol\\\";\\nimport { OPERATION_EXECUTOR, DAI, CHAINLOG_VIEWER } from \\\"../../core/constants/Common.sol\\\";\\nimport { MCD_FLASH } from \\\"../../core/constants/Maker.sol\\\";\\nimport { BALANCER_VAULT } from \\\"../../core/constants/Balancer.sol\\\";\\nimport { ChainLogView } from \\\"../../core/views/ChainLogView.sol\\\";\\nimport { ProxyPermission } from \\\"../../libs/DS/ProxyPermission.sol\\\";\\nimport { IERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\n\\n/**\\n * @title TakeFlashloan Action contract\\n * @notice Executes a sequence of Actions after flashloaning funds\\n */\\ncontract TakeFlashloan is Executable, ProxyPermission {\\n  address internal immutable dai;\\n  ServiceRegistry private immutable registry;\\n\\n  constructor(\\n    ServiceRegistry _registry,\\n    address _dai,\\n    address _dsGuardFactory\\n  ) ProxyPermission(_dsGuardFactory) {\\n    registry = _registry;\\n    dai = _dai;\\n  }\\n\\n  /**\\n   * @dev When the Flashloan lender calls back the Operation Executor we may need to re-establish the calling context.\\n   * @dev The isProxyFlashloan flag is used to give the Operation Executor temporary authority to call the execute method on a user\\\"s proxy. Refers to any proxy wallet (DSProxy or DPMProxy at time of writing)\\n   * @dev isDPMProxy flag switches between regular DSPRoxy and DPMProxy\\n   * @param data Encoded calldata that conforms to the FlashloanData struct\\n   */\\n  function execute(bytes calldata data, uint8[] memory) external payable override {\\n    FlashloanData memory flData = parseInputs(data);\\n    address operationExecutorAddress = registry.getRegisteredService(OPERATION_EXECUTOR);\\n\\n    if (flData.isProxyFlashloan) {\\n      givePermission(flData.isDPMProxy, operationExecutorAddress);\\n    }\\n\\n    if (flData.provider == FlashloanProvider.DssFlash) {\\n      ChainLogView chainlogView = ChainLogView(registry.getRegisteredService(CHAINLOG_VIEWER));\\n\\n      IERC3156FlashLender(chainlogView.getServiceAddress(MCD_FLASH)).flashLoan(\\n        IERC3156FlashBorrower(operationExecutorAddress),\\n        dai,\\n        flData.amount,\\n        abi.encode(flData, address(this))\\n      );\\n    }\\n\\n    if (flData.provider == FlashloanProvider.Balancer) {\\n      IERC20[] memory tokens = new IERC20[](1);\\n      uint256[] memory amounts = new uint256[](1);\\n\\n      tokens[0] = IERC20(flData.asset);\\n      amounts[0] = flData.amount;\\n\\n      IVault(registry.getRegisteredService(BALANCER_VAULT)).flashLoan(\\n        IFlashLoanRecipient(operationExecutorAddress),\\n        tokens,\\n        amounts,\\n        abi.encode(flData, address(this))\\n      );\\n    }\\n\\n    if (flData.isProxyFlashloan) {\\n      removePermission(flData.isDPMProxy, operationExecutorAddress);\\n    }\\n  }\\n\\n  function parseInputs(bytes memory _callData) public pure returns (FlashloanData memory params) {\\n    return abi.decode(_callData, (FlashloanData));\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/Executable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Shared Action Executable interface\\n * @notice Provides a dma-common interface for an execute method to all Action\\n */\\ninterface Executable {\\n  function execute(bytes calldata data, uint8[] memory paramsMap) external payable;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC3156FlashBorrower {\\n  /**\\n   * @dev Receive a flash loan.\\n   * @param initiator The initiator of the loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param fee The additional amount of tokens to repay.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n   */\\n  function onFlashLoan(\\n    address initiator,\\n    address token,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// ServiceRegistry.sol\\n\\n// Copyright (C) 2021-2021 Oazo Apps Limited\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity ^0.8.0;\\n\\ncontract ServiceRegistry {\\n  uint256 public constant MAX_DELAY = 30 days;\\n\\n  mapping(bytes32 => uint256) public lastExecuted;\\n  mapping(bytes32 => address) private namedService;\\n  mapping(bytes32 => bool) private invalidHashes;\\n  address public owner;\\n  uint256 public requiredDelay;\\n\\n  modifier validateInput(uint256 len) {\\n    require(msg.data.length == len, \\\"registry/illegal-padding\\\");\\n    _;\\n  }\\n\\n  modifier delayedExecution() {\\n    bytes32 operationHash = keccak256(msg.data);\\n    uint256 reqDelay = requiredDelay;\\n\\n    /* solhint-disable not-rely-on-time */\\n    if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\\n      // not called before, scheduled for execution\\n      lastExecuted[operationHash] = block.timestamp;\\n      emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\\n    } else {\\n      require(block.timestamp - reqDelay > lastExecuted[operationHash], \\\"registry/delay-too-small\\\");\\n      emit ChangeApplied(operationHash, block.timestamp, msg.data);\\n      _;\\n      lastExecuted[operationHash] = 0;\\n    }\\n    /* solhint-enable not-rely-on-time */\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"registry/only-owner\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initialDelay) {\\n    require(initialDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = initialDelay;\\n    owner = msg.sender;\\n  }\\n\\n  function transferOwnership(\\n    address newOwner\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    owner = newOwner;\\n  }\\n\\n  function changeRequiredDelay(\\n    uint256 newDelay\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    require(newDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = newDelay;\\n  }\\n\\n  function getServiceNameHash(string memory name) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function addNamedService(\\n    bytes32 serviceNameHash,\\n    address serviceAddress\\n  ) external onlyOwner validateInput(68) delayedExecution {\\n    require(invalidHashes[serviceNameHash] == false, \\\"registry/service-name-used-before\\\");\\n    require(namedService[serviceNameHash] == address(0), \\\"registry/service-override\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n    emit NamedServiceAdded(serviceNameHash, serviceAddress);\\n  }\\n\\n  function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = address(0);\\n    invalidHashes[serviceNameHash] = true;\\n    emit NamedServiceRemoved(serviceNameHash);\\n  }\\n\\n  function getRegisteredService(string memory serviceName) external view returns (address) {\\n    return namedService[keccak256(abi.encodePacked(serviceName))];\\n  }\\n\\n  function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\\n    return namedService[serviceNameHash];\\n  }\\n\\n  function clearScheduledExecution(\\n    bytes32 scheduledExecution\\n  ) external onlyOwner validateInput(36) {\\n    require(lastExecuted[scheduledExecution] > 0, \\\"registry/execution-not-scheduled\\\");\\n    lastExecuted[scheduledExecution] = 0;\\n    emit ChangeCancelled(scheduledExecution);\\n  }\\n\\n  event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\\n  event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\\n  event ChangeCancelled(bytes32 dataHash);\\n  event NamedServiceRemoved(bytes32 nameHash);\\n  event NamedServiceAdded(bytes32 nameHash, address service);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/flashloan/balancer/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { IERC20 } from \\\"../../../libs/SafeERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n  /**\\n   * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n   *\\n   * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n   * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n   * Vault, or else the entire flash loan will revert.\\n   *\\n   * `userData` is the same value passed in the `IVault.flashLoan` call.\\n   */\\n  function receiveFlashLoan(\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256[] memory feeAmounts,\\n    bytes memory userData\\n  ) external;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/balancer/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { IFlashLoanRecipient } from \\\"../flashloan/balancer/IFlashLoanRecipient.sol\\\";\\nimport { IERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\n\\ninterface IVault {\\n  function flashLoan(\\n    IFlashLoanRecipient recipient,\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    bytes memory userData\\n  ) external;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nenum FlashloanProvider {\\n  DssFlash,\\n  Balancer\\n}\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  address asset;\\n  bool isProxyFlashloan;\\n  bool isDPMProxy;\\n  FlashloanProvider provider;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/flashloan/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n  /**\\n   * @dev The amount of currency available to be lent.\\n   * @param token The loan currency.\\n   * @return The amount of `token` that can be borrowed.\\n   */\\n  function maxFlashLoan(address token) external view returns (uint256);\\n\\n  /**\\n   * @dev The fee to be charged for a given loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n   */\\n  function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n  /**\\n   * @dev Initiate a flash loan.\\n   * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   */\\n  function flashLoan(\\n    IERC3156FlashBorrower receiver,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Maker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant FLASH_MINT_MODULE = \\\"McdFlashMintModule\\\";\\n\\nstring constant MCD_MANAGER = \\\"McdManager\\\";\\nstring constant MCD_JUG = \\\"McdJug\\\";\\nstring constant MCD_JOIN_DAI = \\\"McdJoinDai\\\";\\n\\nstring constant MCD_FLASH = \\\"MCD_FLASH\\\";\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant BALANCER_VAULT = \\\"BalancerVault\\\";\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/maker/IChainLog.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.15;\\n\\nabstract contract IChainLog {\\n  function getAddress(bytes32 _key) public view virtual returns (address addr);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/views/ChainLogView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.15;\\n\\nimport { IChainLog } from \\\"../../interfaces/maker/IChainLog.sol\\\";\\n\\n/**\\n * @title ChainLogView\\n * @notice Reads the Chainlog contract to get the address of a service by its name\\n */\\ncontract ChainLogView {\\n  address public immutable chainlogAddress;\\n\\n  constructor(address _chainlogAddress) {\\n    chainlogAddress = _chainlogAddress;\\n  }\\n\\n  /**\\n   * @notice Gets the string representation of a bytes32 value with `-` replaced with `_`\\n   * @param _bytes32 value to decode to string\\n   * @return The decoded string\\n   */\\n  function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n    uint8 i = 0;\\n    while (i < 32 && _bytes32[i] != 0) {\\n      i++;\\n    }\\n    bytes memory bytesArray = new bytes(i);\\n    for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n      if (_bytes32[i] == bytes1(\\\"-\\\")) {\\n        bytesArray[i] = bytes1(\\\"_\\\");\\n      } else {\\n        bytesArray[i] = _bytes32[i];\\n      }\\n    }\\n    return string(bytesArray);\\n  }\\n\\n  /**\\n   * @notice Gets the address of a service by its name\\n   * @param serviceName The name of the service\\n   * @return The address of the service\\n   */\\n\\n  function getServiceAddress(string calldata serviceName) public view returns (address) {\\n    bytes32 serviceHash = bytes32(abi.encodePacked(serviceName));\\n    return IChainLog(chainlogAddress).getAddress(serviceHash);\\n  }\\n\\n  /**\\n   * @notice Gets the address of a join adapter by its ilk name\\n   * @param ilkName The name of the ilk\\n   * @return The address of the join adapter\\n   */\\n  function getIlkJoinAddressByName(string calldata ilkName) public view returns (address) {\\n    bytes32 ilkHash = bytes32(abi.encodePacked(\\\"MCD_JOIN_\\\", ilkName));\\n    return IChainLog(chainlogAddress).getAddress(ilkHash);\\n  }\\n\\n  /**\\n   * @notice Gets the address of a join adapter by its ilk hash\\n   * @param ilkHash The hash of the ilk name\\n   * @return The address of the join adapter\\n   */\\n  function getIlkJoinAddressByHash(bytes32 ilkHash) public view returns (address) {\\n    bytes32 newIlkHash = bytes32(abi.encodePacked(\\\"MCD_JOIN_\\\", bytes32ToString(ilkHash)));\\n    return IChainLog(chainlogAddress).getAddress(newIlkHash);\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant CHAINLOG_VIEWER = \\\"ChainLogView\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator_2\\\";\\nstring constant DS_GUARD_FACTORY = \\\"DSGuardFactory\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10 ** 27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action dma-contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/dpm/IAccountImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.15;\\n\\ninterface IAccountImplementation {\\n  function execute(address _target, bytes memory _data) external payable returns (bytes32 response);\\n\\n  function send(address _target, bytes memory _data) external payable;\\n\\n  function owner() external view returns (address owner);\\n\\n  function guard() external returns (address);\\n}\\n\",\"versionPragma\":\">=0.8.15\"},\"contracts/interfaces/ds/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\ninterface IDSProxy {\\n  function owner() external returns (address);\\n\\n  function execute(bytes memory, bytes memory) external payable returns (address, bytes memory);\\n\\n  function execute(address, bytes memory) external payable returns (bytes memory);\\n\\n  function setCache(address _cacheAddr) external returns (bool);\\n}\\n\\ninterface IDSAuthority {\\n  function canCall(address, address, bytes4) external view returns (bool);\\n}\\n\\ninterface IDSAuth {\\n  function authority() external returns (IDSAuthority);\\n\\n  function setAuthority(IDSAuthority) external;\\n}\\n\\ninterface IDSGuard {\\n  function canCall(address, address, bytes4) external view returns (bool);\\n\\n  function permit(address, address, bytes32) external;\\n\\n  function forbid(address, address, bytes32) external;\\n}\\n\\ninterface IDSGuardFactory {\\n  function newGuard() external returns (IDSGuard);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/dpm/IAccountGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.15;\\n\\ninterface IAccountGuard {\\n  function owners(address) external view returns (address);\\n\\n  function owner() external view returns (address);\\n\\n  function setWhitelist(address target, bool status) external;\\n\\n  function canCall(address proxy, address operator) external view returns (bool);\\n\\n  function permit(address caller, address target, bool allowance) external;\\n\\n  function isWhitelisted(address target) external view returns (bool);\\n\\n  function isWhitelistedSend(address target) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.8.15\"},\"contracts/libs/DS/ProxyPermission.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.15;\\n\\nimport { FlashloanData } from \\\"../../core/types/Common.sol\\\";\\nimport { IAccountImplementation } from \\\"../../interfaces/dpm/IAccountImplementation.sol\\\";\\nimport { IAccountGuard } from \\\"../../interfaces/dpm/IAccountGuard.sol\\\";\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { DS_GUARD_FACTORY } from \\\"../../core/constants/Common.sol\\\";\\nimport { IDSGuardFactory, IDSGuard, IDSAuth, IDSAuthority } from \\\"../../interfaces/ds/IDSProxy.sol\\\";\\n\\ncontract ProxyPermission {\\n  IDSGuardFactory internal immutable dsGuardFactory;\\n  bytes4 public constant ALLOWED_METHOD_HASH = bytes4(keccak256(\\\"execute(address,bytes)\\\"));\\n\\n  constructor(address _dsGuardFactory) {\\n    dsGuardFactory = IDSGuardFactory(_dsGuardFactory);\\n  }\\n\\n  function givePermission(bool isDPMProxy, address _contractAddr) public {\\n    if (isDPMProxy) {\\n      // DPM permission\\n      IAccountGuard(IAccountImplementation(address(this)).guard()).permit(\\n        _contractAddr,\\n        address(this),\\n        true\\n      );\\n    } else {\\n      // DSProxy permission\\n      address currAuthority = address(IDSAuth(address(this)).authority());\\n      IDSGuard guard = IDSGuard(currAuthority);\\n      if (currAuthority == address(0)) {\\n        guard = dsGuardFactory.newGuard();\\n        IDSAuth(address(this)).setAuthority(IDSAuthority(address(guard)));\\n      }\\n\\n      if (!guard.canCall(_contractAddr, address(this), ALLOWED_METHOD_HASH)) {\\n        guard.permit(_contractAddr, address(this), ALLOWED_METHOD_HASH);\\n      }\\n    }\\n  }\\n\\n  function removePermission(bool isDPMProxy, address _contractAddr) public {\\n    if (isDPMProxy) {\\n      // DPM permission\\n      IAccountGuard(IAccountImplementation(address(this)).guard()).permit(\\n        _contractAddr,\\n        address(this),\\n        false\\n      );\\n    } else {\\n      // DSProxy permission\\n      address currAuthority = address(IDSAuth(address(this)).authority());\\n      if (currAuthority == address(0)) {\\n        return;\\n      }\\n      IDSGuard guard = IDSGuard(currAuthority);\\n      guard.forbid(_contractAddr, address(this), ALLOWED_METHOD_HASH);\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0x373857dFe57F0B894f06aF9B16aBF46a28bB3908","bytecode":"0x60e060405234801561001057600080fd5b506040516200144b3803806200144b83398101604081905261003191610066565b6001600160a01b0390811660805291821660c0521660a0526100b3565b6001600160a01b038116811461006357600080fd5b50565b60008060006060848603121561007b57600080fd5b83516100868161004e565b60208501519093506100978161004e565b60408501519092506100a88161004e565b809150509250925092565b60805160a05160c05161135a620000f160003960008181610612015281816106f901526109750152600061080a0152600061025e015261135a6000f3fe60806040526004361061004a5760003560e01c80631dd526ce1461004f5780634cc3b2461461007157806385e92d98146100915780639093410d146100a4578063f301e925146100da575b600080fd5b34801561005b57600080fd5b5061006f61006a366004610b44565b610115565b005b34801561007d57600080fd5b5061006f61008c366004610b44565b610437565b61006f61009f366004610c30565b61058c565b3480156100b057600080fd5b506100c46100bf366004610d5a565b610acb565b6040516100d19190610f2d565b60405180910390f35b3480156100e657600080fd5b506100fc60008051602061130583398151915281565b6040516001600160e01b031990911681526020016100d1565b81156101e557306001600160a01b0316637ceab3b16040518163ffffffff1660e01b81526004016020604051808303816000875af115801561015b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017f9190610f57565b6001600160a01b031663c55a3cf4823060016040518463ffffffff1660e01b81526004016101af93929190610f74565b600060405180830381600087803b1580156101c957600080fd5b505af11580156101dd573d6000803e3d6000fd5b505050505050565b6000306001600160a01b031663bf7e214f6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061024b9190610f57565b9050806001600160a01b03811661033d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166365688cc96040518163ffffffff1660e01b81526004016020604051808303816000875af11580156102bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e09190610f57565b604051637a9e5e4b60e01b81526001600160a01b03821660048201529091503090637a9e5e4b90602401600060405180830381600087803b15801561032457600080fd5b505af1158015610338573d6000803e3d6000fd5b505050505b60405163b700961360e01b81526001600160a01b0382169063b70096139061037b908690309060008051602061130583398151915290600401610f98565b602060405180830381865afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190610fd0565b610431576040516332fba9a360e21b81526001600160a01b0382169063cbeea68c906103fe908690309060008051602061130583398151915290600401610f98565b600060405180830381600087803b15801561041857600080fd5b505af115801561042c573d6000803e3d6000fd5b505050505b50505050565b81156104d157306001600160a01b0316637ceab3b16040518163ffffffff1660e01b81526004016020604051808303816000875af115801561047d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a19190610f57565b6001600160a01b031663c55a3cf4823060006040518463ffffffff1660e01b81526004016101af93929190610f74565b6000306001600160a01b031663bf7e214f6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610513573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105379190610f57565b90506001600160a01b03811661054c57505050565b604051632bc3217d60e01b815281906001600160a01b03821690632bc3217d906103fe908690309060008051602061130583398151915290600401610f98565b60006105cd84848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610acb92505050565b604080518082018252601381527227b832b930ba34b7b722bc32b1baba37b92f9960691b60208201529051630851f3bd60e01b81529192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd916106469190600401610fed565b602060405180830381865afa158015610663573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106879190610f57565b90508160400151156106a1576106a1826060015182610115565b6000826080015160018111156106b9576106b9610dd4565b036108b557604080518082018252600c81526b436861696e4c6f675669657760a01b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd9161072c91600401610fed565b602060405180830381865afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d9190610f57565b604080518082018252600981526809a8688be8c9882a6960bb1b60208201529051637f244b2960e11b81529192506001600160a01b0383169163fe489652916107b891600401610fed565b602060405180830381865afa1580156107d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f99190610f57565b6001600160a01b0316635cffe9de837f000000000000000000000000000000000000000000000000000000000000000086600001518730604051602001610841929190611000565b6040516020818303038152906040526040518563ffffffff1660e01b815260040161086f949392919061102a565b6020604051808303816000875af115801561088e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b29190610fd0565b50505b6001826080015160018111156108cd576108cd610dd4565b03610aac5760408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905083602001518260008151811061092f5761092f611067565b60200260200101906001600160a01b031690816001600160a01b03168152505083600001518160008151811061096757610967611067565b6020026020010181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630851f3bd6040518060400160405280600d81526020016c10985b185b98d95c95985d5b1d609a1b8152506040518263ffffffff1660e01b81526004016109e49190610fed565b602060405180830381865afa158015610a01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a259190610f57565b6001600160a01b0316635c38449e8484848830604051602001610a49929190611000565b6040516020818303038152906040526040518563ffffffff1660e01b8152600401610a77949392919061107d565b600060405180830381600087803b158015610a9157600080fd5b505af1158015610aa5573d6000803e3d6000fd5b5050505050505b816040015115610ac457610ac4826060015182610437565b5050505050565b610b046040805160c081018252600080825260208201819052918101829052606081018290529060808201908152602001606081525090565b81806020019051810190610b18919061124a565b92915050565b8015158114610b2c57600080fd5b50565b6001600160a01b0381168114610b2c57600080fd5b60008060408385031215610b5757600080fd5b8235610b6281610b1e565b91506020830135610b7281610b2f565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715610bb557610bb5610b7d565b60405290565b60405160c081016001600160401b0381118282101715610bb557610bb5610b7d565b604051601f8201601f191681016001600160401b0381118282101715610c0557610c05610b7d565b604052919050565b60006001600160401b03821115610c2657610c26610b7d565b5060051b60200190565b600080600060408486031215610c4557600080fd5b83356001600160401b0380821115610c5c57600080fd5b818601915086601f830112610c7057600080fd5b813581811115610c7f57600080fd5b60208881838601011115610c9257600080fd5b808401965081955080880135935082841115610cad57600080fd5b838801935088601f850112610cc157600080fd5b83359250610cd6610cd184610c0d565b610bdd565b83815260059390931b8401810192818101925089841115610cf657600080fd5b938101935b83851015610d2457843560ff81168114610d155760008081fd5b83529381019391810191610cfb565b80955050505050509250925092565b60006001600160401b03821115610d4c57610d4c610b7d565b50601f01601f191660200190565b600060208284031215610d6c57600080fd5b81356001600160401b03811115610d8257600080fd5b8201601f81018413610d9357600080fd5b8035610da1610cd182610d33565b818152856020838501011115610db657600080fd5b81602084016020830137600091810160200191909152949350505050565b634e487b7160e01b600052602160045260246000fd5b60005b83811015610e05578181015183820152602001610ded565b50506000910152565b60008151808452610e26816020860160208601610dea565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015610ea55782840389528151606081518652868201518188880152610e8282880182610e0e565b604093840151151597909301969096525098850198935090840190600101610e58565b5091979650505050505050565b8051825260018060a01b0360208201511660208301526040810151151560408301526060810151151560608301526000608082015160028110610f0557634e487b7160e01b600052602160045260246000fd5b8060808501525060a082015160c060a0850152610f2560c0850182610e3a565b949350505050565b602081526000610f406020830184610eb2565b9392505050565b8051610f5281610b2f565b919050565b600060208284031215610f6957600080fd5b8151610f4081610b2f565b6001600160a01b039384168152919092166020820152901515604082015260600190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b8051610f5281610b1e565b600060208284031215610fe257600080fd5b8151610f4081610b1e565b602081526000610f406020830184610e0e565b6040815260006110136040830185610eb2565b905060018060a01b03831660208301529392505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061105d90830184610e0e565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0385811682526080602080840182905286519184018290526000928782019290919060a0860190855b818110156110cb5785518516835294830194918301916001016110ad565b5050858103604087015287518082529082019350915080870160005b83811015611103578151855293820193908201906001016110e7565b5050505082810360608401526111198185610e0e565b979650505050505050565b805160028110610f5257600080fd5b600082601f83011261114457600080fd5b81516020611154610cd183610c0d565b82815260059290921b8401810191818101908684111561117357600080fd5b8286015b8481101561123f5780516001600160401b03808211156111975760008081fd5b908801906060828b03601f19018113156111b15760008081fd5b6111b9610b93565b878401518152604080850151848111156111d35760008081fd5b85019350603f84018d136111e75760008081fd5b888401516111f7610cd182610d33565b8181528e8383880101111561120c5760008081fd5b61121b828c8301858901610dea565b838b01525061122b858401610fc5565b908201528652505050918301918301611177565b509695505050505050565b60006020828403121561125c57600080fd5b81516001600160401b038082111561127357600080fd5b9083019060c0828603121561128757600080fd5b61128f610bbb565b8251815261129f60208401610f47565b60208201526112b060408401610fc5565b60408201526112c160608401610fc5565b60608201526112d260808401611124565b608082015260a0830151828111156112e957600080fd5b6112f587828601611133565b60a0830152509594505050505056fe1cff79cde515a86f6cc1adbebe8ae25888905561371faf11c8102211f56b4870a26469706673582212203292365d994bf0a4ac88afdcac7882a6f4eb0ff4345fb10e49c29df61c5e795764736f6c63430008120033","deployedBytecode":"","abi":[{"inputs":[{"internalType":"contract ServiceRegistry","name":"_registry","type":"address"},{"internalType":"address","name":"_dai","type":"address"},{"internalType":"address","name":"_dsGuardFactory","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ALLOWED_METHOD_HASH","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8[]","name":"","type":"uint8[]"}],"name":"execute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bool","name":"isDPMProxy","type":"bool"},{"internalType":"address","name":"_contractAddr","type":"address"}],"name":"givePermission","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_callData","type":"bytes"}],"name":"parseInputs","outputs":[{"components":[{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"bool","name":"isProxyFlashloan","type":"bool"},{"internalType":"bool","name":"isDPMProxy","type":"bool"},{"internalType":"enum FlashloanProvider","name":"provider","type":"uint8"},{"components":[{"internalType":"bytes32","name":"targetHash","type":"bytes32"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bool","name":"skipped","type":"bool"}],"internalType":"struct Call[]","name":"calls","type":"tuple[]"}],"internalType":"struct FlashloanData","name":"params","type":"tuple"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bool","name":"isDPMProxy","type":"bool"},{"internalType":"address","name":"_contractAddr","type":"address"}],"name":"removePermission","outputs":[],"stateMutability":"nonpayable","type":"function"}]}