{"metadata":"{\"defaultCompiler\":{\"version\":\"0.4.21\"},\"sources\":{\"contracts/core/OperationExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"./ServiceRegistry.sol\\\";\\nimport { OperationStorage } from \\\"./OperationStorage.sol\\\";\\nimport { OperationsRegistry } from \\\"./OperationsRegistry.sol\\\";\\nimport { ActionAddress } from \\\"../libs/ActionAddress.sol\\\";\\nimport { TakeFlashloan } from \\\"../actions/common/TakeFlashloan.sol\\\";\\nimport { Executable } from \\\"../actions/common/Executable.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../interfaces/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../interfaces/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IFlashLoanRecipient } from \\\"../interfaces/flashloan/balancer/IFlashLoanRecipient.sol\\\";\\nimport { IDSProxy } from \\\"../interfaces/ds/IDSProxy.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../libs/SafeERC20.sol\\\";\\nimport { SafeMath } from \\\"../libs/SafeMath.sol\\\";\\nimport { FlashloanData, Call } from \\\"./types/Common.sol\\\";\\nimport { OPERATION_STORAGE, OPERATIONS_REGISTRY, OPERATION_EXECUTOR } from \\\"./constants/Common.sol\\\";\\nimport { FLASH_MINT_MODULE } from \\\"./constants/Maker.sol\\\";\\nimport { BALANCER_VAULT } from \\\"./constants/Balancer.sol\\\";\\n\\nerror UntrustedLender(address lender);\\nerror InconsistentAsset(address flashloaned, address required);\\nerror InconsistentAmount(uint256 flashloaned, uint256 required);\\n\\n/**\\n * @title Operation Executor\\n * @notice Is responsible for executing sequences of Actions (Operations)\\n */\\ncontract OperationExecutor is IERC3156FlashBorrower, IFlashLoanRecipient {\\n  using ActionAddress for address;\\n  using SafeERC20 for IERC20;\\n  using SafeMath for uint256;\\n\\n  ServiceRegistry public immutable registry;\\n\\n  /**\\n   * @dev Emitted once an Operation has completed execution\\n   * @param name The address initiating the deposit\\n   * @param calls An array of Action calls the operation must execute\\n   **/\\n  event Operation(bytes32 indexed name, Call[] calls);\\n\\n  constructor(ServiceRegistry _registry) {\\n    registry = _registry;\\n  }\\n\\n  /**\\n   * @notice Executes an operation\\n   * @dev\\n   * There are operations stored in the OperationsRegistry which guarantee the order of execution of actions for a given Operation.\\n   * There is a possibility to execute an arrays of calls that don't form an official operation.\\n   *\\n   * Operation storage is cleared before and after an operation is executed.\\n   *\\n   * To avoid re-entrancy attack, there is a lock implemented on OpStorage.\\n   * A standard reentrancy modifier is not sufficient because the second call via the onFlashloan handler\\n   * calls aggregateCallback via DSProxy once again but this breaks the special modifier _ behaviour\\n   * and the modifier cannot return the execution flow to the original function.\\n   * This is why re-entrancy defence is immplemented here using an external storage contract via the lock/unlock functions\\n   * @param calls An array of Action calls the operation must execute\\n   * @param operationName The name of the Operation being executed\\n   */\\n  function executeOp(Call[] memory calls, string calldata operationName) public payable {\\n    OperationStorage opStorage = OperationStorage(registry.getRegisteredService(OPERATION_STORAGE));\\n    opStorage.lock();\\n    OperationsRegistry opRegistry = OperationsRegistry(\\n      registry.getRegisteredService(OPERATIONS_REGISTRY)\\n    );\\n\\n    opStorage.clearStorage();\\n    (bytes32[] memory actions, bool[] memory optional) = opRegistry.getOperation(operationName);\\n    opStorage.setOperationActions(actions, optional);\\n    aggregate(calls);\\n\\n    opStorage.clearStorage();\\n    opStorage.unlock();\\n    // By packing the string into bytes32 which means the max char length is capped at 64\\n    emit Operation(bytes32(abi.encodePacked(operationName)), calls);\\n  }\\n\\n  function aggregate(Call[] memory calls) internal {\\n    OperationStorage opStorage = OperationStorage(registry.getRegisteredService(OPERATION_STORAGE));\\n    bool hasActionsToVerify = opStorage.hasActionsToVerify();\\n\\n    for (uint256 current = 0; current < calls.length; current++) {\\n      if (hasActionsToVerify) {\\n        opStorage.verifyAction(calls[current].targetHash, calls[current].skipped);\\n      }\\n      if (!calls[current].skipped) {\\n        address target = registry.getServiceAddress(calls[current].targetHash);\\n        target.execute(calls[current].callData);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice Not to be called directly\\n   * @dev Is called by the Operation Executor via a user's proxy to execute Actions nested in the FlashloanAction\\n   * @param calls An array of Action calls the operation must execute\\n   */\\n  function callbackAggregate(Call[] memory calls) external {\\n    require(\\n      msg.sender == registry.getRegisteredService(OPERATION_EXECUTOR),\\n      \\\"OpExecutor: Caller forbidden\\\"\\n    );\\n    aggregate(calls);\\n  }\\n\\n  /**\\n   * @notice Not to be called directly.\\n   * @dev Callback handler for use by a flashloan lender contract.\\n   * If the isProxyFlashloan flag is supplied we reestablish the calling context as the user's proxy (at time of writing DSProxy). Although stored values will\\n   * We set the initiator on Operation Storage such that calls originating from other contracts EG Oasis Automation Bot (see https://github.com/OasisDEX/automation-smartcontracts)\\n   * The initiator address will be used to store values against the original msg.sender.\\n   * This protects against the Operation Storage values being polluted by malicious code from untrusted 3rd party contracts.\\n\\n   * @param asset The address of the asset being flash loaned\\n   * @param amount The size of the flash loan\\n   * @param fee The Fee charged for the loan\\n   * @param data Any calldata sent to the contract for execution later in the callback\\n   */\\n  function onFlashLoan(\\n    address initiator,\\n    address asset,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external override returns (bytes32) {\\n    FlashloanData memory flData = abi.decode(data, (FlashloanData));\\n    address lender = registry.getRegisteredService(FLASH_MINT_MODULE);\\n\\n    checkIfLenderIsTrusted(lender);\\n    checkIfFlashloanedAssetIsTheRequiredOne(asset, flData.asset);\\n    checkIfFlashloanedAmountIsTheRequiredOne(asset, flData.amount);\\n\\n    processFlashloan(flData, initiator);\\n\\n    uint256 paybackAmount = amount.add(fee);\\n    require(\\n      IERC20(asset).balanceOf(address(this)) >= paybackAmount,\\n      \\\"Insufficient funds for payback\\\"\\n    );\\n\\n    IERC20(asset).safeApprove(lender, paybackAmount);\\n    return keccak256(\\\"ERC3156FlashBorrower.onFlashLoan\\\");\\n  }\\n\\n  function receiveFlashLoan(\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256[] memory feeAmounts,\\n    bytes memory data\\n  ) external override {\\n    address asset = address(tokens[0]);\\n    address lender = registry.getRegisteredService(BALANCER_VAULT);\\n    (FlashloanData memory flData, address initiator) = abi.decode(data, (FlashloanData, address));\\n\\n    checkIfLenderIsTrusted(lender);\\n    checkIfFlashloanedAssetIsTheRequiredOne(asset, flData.asset);\\n    checkIfFlashloanedAmountIsTheRequiredOne(asset, flData.amount);\\n\\n    processFlashloan(flData, initiator);\\n\\n    uint256 paybackAmount = amounts[0].add(feeAmounts[0]);\\n\\n    require(\\n      IERC20(asset).balanceOf(address(this)) >= paybackAmount,\\n      \\\"Insufficient funds for payback\\\"\\n    );\\n\\n    IERC20(asset).safeTransfer(lender, paybackAmount);\\n  }\\n\\n  function checkIfLenderIsTrusted(address lender) public view {\\n    if (msg.sender != lender) revert UntrustedLender(msg.sender);\\n  }\\n\\n  function checkIfFlashloanedAssetIsTheRequiredOne(\\n    address flashloaned,\\n    address required\\n  ) public pure {\\n    if (flashloaned != required) revert InconsistentAsset(flashloaned, required);\\n  }\\n\\n  function checkIfFlashloanedAmountIsTheRequiredOne(\\n    address asset,\\n    uint256 requiredAmount\\n  ) public view {\\n    uint256 assetBalance = IERC20(asset).balanceOf(address(this));\\n    if (assetBalance < requiredAmount) revert InconsistentAmount(assetBalance, requiredAmount);\\n  }\\n\\n  function processFlashloan(FlashloanData memory flData, address initiator) private {\\n    if (flData.isProxyFlashloan) {\\n      IERC20(flData.asset).safeTransfer(initiator, flData.amount);\\n      IDSProxy(payable(initiator)).execute(\\n        address(this),\\n        abi.encodeWithSelector(this.callbackAggregate.selector, flData.calls)\\n      );\\n    } else {\\n      OperationStorage opStorage = OperationStorage(\\n        registry.getRegisteredService(OPERATION_STORAGE)\\n      );\\n      opStorage.setInitiator(initiator);\\n      aggregate(flData.calls);\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// ServiceRegistry.sol\\n\\n// Copyright (C) 2021-2021 Oazo Apps Limited\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity ^0.8.0;\\n\\ncontract ServiceRegistry {\\n  uint256 public constant MAX_DELAY = 30 days;\\n\\n  mapping(bytes32 => uint256) public lastExecuted;\\n  mapping(bytes32 => address) private namedService;\\n  mapping(bytes32 => bool) private invalidHashes;\\n  address public owner;\\n  uint256 public requiredDelay;\\n\\n  modifier validateInput(uint256 len) {\\n    require(msg.data.length == len, \\\"registry/illegal-padding\\\");\\n    _;\\n  }\\n\\n  modifier delayedExecution() {\\n    bytes32 operationHash = keccak256(msg.data);\\n    uint256 reqDelay = requiredDelay;\\n\\n    /* solhint-disable not-rely-on-time */\\n    if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\\n      // not called before, scheduled for execution\\n      lastExecuted[operationHash] = block.timestamp;\\n      emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\\n    } else {\\n      require(block.timestamp - reqDelay > lastExecuted[operationHash], \\\"registry/delay-too-small\\\");\\n      emit ChangeApplied(operationHash, block.timestamp, msg.data);\\n      _;\\n      lastExecuted[operationHash] = 0;\\n    }\\n    /* solhint-enable not-rely-on-time */\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"registry/only-owner\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initialDelay) {\\n    require(initialDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = initialDelay;\\n    owner = msg.sender;\\n  }\\n\\n  function transferOwnership(\\n    address newOwner\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    owner = newOwner;\\n  }\\n\\n  function changeRequiredDelay(\\n    uint256 newDelay\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    require(newDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = newDelay;\\n  }\\n\\n  function getServiceNameHash(string memory name) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function addNamedService(\\n    bytes32 serviceNameHash,\\n    address serviceAddress\\n  ) external onlyOwner validateInput(68) delayedExecution {\\n    require(invalidHashes[serviceNameHash] == false, \\\"registry/service-name-used-before\\\");\\n    require(namedService[serviceNameHash] == address(0), \\\"registry/service-override\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n    emit NamedServiceAdded(serviceNameHash, serviceAddress);\\n  }\\n\\n  function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = address(0);\\n    invalidHashes[serviceNameHash] = true;\\n    emit NamedServiceRemoved(serviceNameHash);\\n  }\\n\\n  function getRegisteredService(string memory serviceName) external view returns (address) {\\n    return namedService[keccak256(abi.encodePacked(serviceName))];\\n  }\\n\\n  function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\\n    return namedService[serviceNameHash];\\n  }\\n\\n  function clearScheduledExecution(\\n    bytes32 scheduledExecution\\n  ) external onlyOwner validateInput(36) {\\n    require(lastExecuted[scheduledExecution] > 0, \\\"registry/execution-not-scheduled\\\");\\n    lastExecuted[scheduledExecution] = 0;\\n    emit ChangeCancelled(scheduledExecution);\\n  }\\n\\n  event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\\n  event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\\n  event ChangeCancelled(bytes32 dataHash);\\n  event NamedServiceRemoved(bytes32 nameHash);\\n  event NamedServiceAdded(bytes32 nameHash, address service);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/core/OperationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"./ServiceRegistry.sol\\\";\\n\\n/**\\n * @title Operation Storage\\n * @notice Stores the return values from Actions during an Operation's execution\\n * @dev valuesHolders is an array of t/x initiators (msg.sender) who have pushed values to Operation Storage\\n * returnValues is a mapping between a msg.sender and an array of Action return values generated by that senders transaction\\n */\\ncontract OperationStorage {\\n  uint8 internal action = 0;\\n  bytes32[] public actions;\\n  bool[] public optionals;\\n  mapping(address => bytes32[]) public returnValues;\\n  address[] public valuesHolders;\\n  bool private locked;\\n  address private whoLocked;\\n  address public initiator;\\n  address immutable operationExecutorAddress;\\n\\n  ServiceRegistry internal immutable registry;\\n\\n  constructor(ServiceRegistry _registry, address _operationExecutorAddress) {\\n    registry = _registry;\\n    operationExecutorAddress = _operationExecutorAddress;\\n  }\\n\\n  /**\\n   * @dev Locks storage to protect against re-entrancy attacks.@author\\n   */\\n  function lock() external {\\n    locked = true;\\n    whoLocked = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Only the original locker can unlock the contract at the end of the transaction\\n   */\\n  function unlock() external {\\n    require(whoLocked == msg.sender, \\\"Only the locker can unlock\\\");\\n    require(locked, \\\"Not locked\\\");\\n    locked = false;\\n    whoLocked = address(0);\\n  }\\n\\n  /**\\n   * @dev Sets the initiator of the original call\\n   * Is used by Automation Bot branch in the onFlashloan callback in Operation Executor\\n   * Ensures that third party calls to Operation Storage do not maliciously override values in Operation Storage\\n   * @param _initiator Sets the initiator to Operation Executor contract when storing return values from flashloan nested Action\\n   */\\n  function setInitiator(address _initiator) external {\\n    require(msg.sender == operationExecutorAddress);\\n    initiator = _initiator;\\n  }\\n\\n  /**\\n   * @param _actions Stores the Actions currently being executed for a given Operation and their optionality\\n   */\\n  function setOperationActions(bytes32[] memory _actions, bool[] memory _optionals) external {\\n    actions = _actions;\\n    optionals = _optionals;\\n  }\\n\\n  /**\\n   * @param actionHash Checks the current action has against the expected action hash\\n   */\\n  function verifyAction(bytes32 actionHash, bool skipped) external {\\n    if (skipped) {\\n      require(optionals[action], \\\"Action cannot be skipped\\\");\\n    }\\n    require(actions[action] == actionHash, \\\"incorrect-action\\\");\\n    registry.getServiceAddress(actionHash);\\n    action++;\\n  }\\n\\n  /**\\n   * @dev Custom operations have no Actions stored in Operation Registry\\n   * @return Returns true / false depending on whether the Operation has any actions to verify the Operation against\\n   */\\n  function hasActionsToVerify() external view returns (bool) {\\n    return actions.length > 0;\\n  }\\n\\n  /**\\n   * @param value Pushes a bytes32 to end of the returnValues array\\n   */\\n  function push(bytes32 value) external {\\n    address who = msg.sender;\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n\\n    if (returnValues[who].length == 0) {\\n      valuesHolders.push(who);\\n    }\\n    returnValues[who].push(value);\\n  }\\n\\n  /**\\n   * @dev Values are stored against an address (who)\\n   * This ensures that malicious actors looking to push values to Operation Storage mid transaction cannot overwrite values\\n   * @param index The index of the desired value\\n   * @param who The msg.sender address responsible for storing values\\n   */\\n  function at(uint256 index, address who) external view returns (bytes32) {\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n    return returnValues[who][index];\\n  }\\n\\n  /**\\n   * @param who The msg.sender address responsible for storing values\\n   * @return The length of return values stored against a given msg.sender address\\n   */\\n  function len(address who) external view returns (uint256) {\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n    return returnValues[who].length;\\n  }\\n\\n  /**\\n   * @dev Clears storage in preparation for the next Operation\\n   */\\n  function clearStorage() external {\\n    delete action;\\n    delete actions;\\n    for (uint256 i = 0; i < valuesHolders.length; i++) {\\n      delete returnValues[valuesHolders[i]];\\n    }\\n    delete valuesHolders;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/actions/common/Executable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Shared Action Executable interface\\n * @notice Provides a dma-common interface for an execute method to all Action\\n */\\ninterface Executable {\\n  function execute(bytes calldata data, uint8[] memory paramsMap) external payable;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/ActionAddress.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\nimport \\\"./Address.sol\\\";\\nimport \\\"../actions/common/Executable.sol\\\";\\n\\nlibrary ActionAddress {\\n  using Address for address;\\n\\n  function execute(address action, bytes memory callData) internal {\\n    require(isCallingAnExecutable(callData), \\\"OpExecutor: illegal call\\\");\\n    action.functionDelegateCall(callData, \\\"OpExecutor: low-level delegatecall failed\\\");\\n  }\\n\\n  function isCallingAnExecutable(bytes memory callData) private pure returns (bool) {\\n    bytes4 executeSelector = convertBytesToBytes4(\\n      abi.encodeWithSelector(Executable.execute.selector)\\n    );\\n    bytes4 selector = convertBytesToBytes4(callData);\\n    return selector == executeSelector;\\n  }\\n\\n  function convertBytesToBytes4(bytes memory inBytes) private pure returns (bytes4 outBytes4) {\\n    if (inBytes.length == 0) {\\n      return 0x0;\\n    }\\n\\n    assembly {\\n      outBytes4 := mload(add(inBytes, 32))\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant CHAINLOG_VIEWER = \\\"ChainLogView\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator_2\\\";\\nstring constant DS_GUARD_FACTORY = \\\"DSGuardFactory\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10 ** 27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action dma-contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nenum FlashloanProvider {\\n  DssFlash,\\n  Balancer\\n}\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  address asset;\\n  bool isProxyFlashloan;\\n  bool isDPMProxy;\\n  FlashloanProvider provider;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/OperationsRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Operation } from \\\"./types/Common.sol\\\";\\nimport { OPERATIONS_REGISTRY } from \\\"./constants/Common.sol\\\";\\n\\nstruct StoredOperation {\\n  bytes32[] actions;\\n  bool[] optional;\\n  string name;\\n}\\n\\n/**\\n * @title Operation Registry\\n * @notice Stores the Actions that constitute a given Operation and information if an Action can be skipped\\n\\n */\\ncontract OperationsRegistry {\\n  mapping(string => StoredOperation) private operations;\\n  address public owner;\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"only-owner\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  /**\\n   * @notice Stores the Actions that constitute a given Operation\\n   * @param newOwner The address of the new owner of the Operations Registry\\n   */\\n  function transferOwnership(address newOwner) public onlyOwner {\\n    owner = newOwner;\\n  }\\n\\n  /**\\n   * @dev Emitted when a new operation is added or an existing operation is updated\\n   * @param name The Operation name\\n   **/\\n  event OperationAdded(bytes32 indexed name);\\n\\n  /**\\n   * @notice Adds an Operation's Actions keyed to a an operation name\\n   * @param operation Struct with Operation name, actions and their optionality\\n   */\\n  function addOperation(StoredOperation calldata operation) external onlyOwner {\\n    operations[operation.name] = operation;\\n    // By packing the string into bytes32 which means the max char length is capped at 64\\n    emit OperationAdded(bytes32(abi.encodePacked(operation.name)));\\n  }\\n\\n  /**\\n   * @notice Gets an Operation from the Registry\\n   * @param name The name of the Operation\\n   * @return actions Returns an array of Actions and array for optionality of coresponding Actions\\n   */\\n  function getOperation(\\n    string memory name\\n  ) external view returns (bytes32[] memory actions, bool[] memory optional) {\\n    if (keccak256(bytes(operations[name].name)) == keccak256(bytes(\\\"\\\"))) {\\n      revert(\\\"Operation doesn't exist\\\");\\n    }\\n    actions = operations[name].actions;\\n    optional = operations[name].optional;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/flashloan/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC3156FlashBorrower {\\n  /**\\n   * @dev Receive a flash loan.\\n   * @param initiator The initiator of the loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param fee The additional amount of tokens to repay.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n   */\\n  function onFlashLoan(\\n    address initiator,\\n    address token,\\n    uint256 amount,\\n    uint256 fee,\\n    bytes calldata data\\n  ) external returns (bytes32);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/flashloan/balancer/IFlashLoanRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { IERC20 } from \\\"../../../libs/SafeERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n  /**\\n   * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n   *\\n   * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n   * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n   * Vault, or else the entire flash loan will revert.\\n   *\\n   * `userData` is the same value passed in the `IVault.flashLoan` call.\\n   */\\n  function receiveFlashLoan(\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    uint256[] memory feeAmounts,\\n    bytes memory userData\\n  ) external;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/balancer/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { IFlashLoanRecipient } from \\\"../flashloan/balancer/IFlashLoanRecipient.sol\\\";\\nimport { IERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\n\\ninterface IVault {\\n  function flashLoan(\\n    IFlashLoanRecipient recipient,\\n    IERC20[] memory tokens,\\n    uint256[] memory amounts,\\n    bytes memory userData\\n  ) external;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/flashloan/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright (C) 2021 Dai Foundation\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n  /**\\n   * @dev The amount of currency available to be lent.\\n   * @param token The loan currency.\\n   * @return The amount of `token` that can be borrowed.\\n   */\\n  function maxFlashLoan(address token) external view returns (uint256);\\n\\n  /**\\n   * @dev The fee to be charged for a given loan.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n   */\\n  function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n  /**\\n   * @dev Initiate a flash loan.\\n   * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n   * @param token The loan currency.\\n   * @param amount The amount of tokens lent.\\n   * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n   */\\n  function flashLoan(\\n    IERC3156FlashBorrower receiver,\\n    address token,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Balancer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant BALANCER_VAULT = \\\"BalancerVault\\\";\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Maker.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant FLASH_MINT_MODULE = \\\"McdFlashMintModule\\\";\\n\\nstring constant MCD_MANAGER = \\\"McdManager\\\";\\nstring constant MCD_JUG = \\\"McdJug\\\";\\nstring constant MCD_JOIN_DAI = \\\"McdJoinDai\\\";\\n\\nstring constant MCD_FLASH = \\\"MCD_FLASH\\\";\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/maker/IChainLog.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.15;\\n\\nabstract contract IChainLog {\\n  function getAddress(bytes32 _key) public view virtual returns (address addr);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/views/ChainLogView.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.15;\\n\\nimport { IChainLog } from \\\"../../interfaces/maker/IChainLog.sol\\\";\\n\\n/**\\n * @title ChainLogView\\n * @notice Reads the Chainlog contract to get the address of a service by its name\\n */\\ncontract ChainLogView {\\n  address public immutable chainlogAddress;\\n\\n  constructor(address _chainlogAddress) {\\n    chainlogAddress = _chainlogAddress;\\n  }\\n\\n  /**\\n   * @notice Gets the string representation of a bytes32 value with `-` replaced with `_`\\n   * @param _bytes32 value to decode to string\\n   * @return The decoded string\\n   */\\n  function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n    uint8 i = 0;\\n    while (i < 32 && _bytes32[i] != 0) {\\n      i++;\\n    }\\n    bytes memory bytesArray = new bytes(i);\\n    for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n      if (_bytes32[i] == bytes1(\\\"-\\\")) {\\n        bytesArray[i] = bytes1(\\\"_\\\");\\n      } else {\\n        bytesArray[i] = _bytes32[i];\\n      }\\n    }\\n    return string(bytesArray);\\n  }\\n\\n  /**\\n   * @notice Gets the address of a service by its name\\n   * @param serviceName The name of the service\\n   * @return The address of the service\\n   */\\n\\n  function getServiceAddress(string calldata serviceName) public view returns (address) {\\n    bytes32 serviceHash = bytes32(abi.encodePacked(serviceName));\\n    return IChainLog(chainlogAddress).getAddress(serviceHash);\\n  }\\n\\n  /**\\n   * @notice Gets the address of a join adapter by its ilk name\\n   * @param ilkName The name of the ilk\\n   * @return The address of the join adapter\\n   */\\n  function getIlkJoinAddressByName(string calldata ilkName) public view returns (address) {\\n    bytes32 ilkHash = bytes32(abi.encodePacked(\\\"MCD_JOIN_\\\", ilkName));\\n    return IChainLog(chainlogAddress).getAddress(ilkHash);\\n  }\\n\\n  /**\\n   * @notice Gets the address of a join adapter by its ilk hash\\n   * @param ilkHash The hash of the ilk name\\n   * @return The address of the join adapter\\n   */\\n  function getIlkJoinAddressByHash(bytes32 ilkHash) public view returns (address) {\\n    bytes32 newIlkHash = bytes32(abi.encodePacked(\\\"MCD_JOIN_\\\", bytes32ToString(ilkHash)));\\n    return IChainLog(chainlogAddress).getAddress(newIlkHash);\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/dpm/IAccountImplementation.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.15;\\n\\ninterface IAccountImplementation {\\n  function execute(address _target, bytes memory _data) external payable returns (bytes32 response);\\n\\n  function send(address _target, bytes memory _data) external payable;\\n\\n  function owner() external view returns (address owner);\\n\\n  function guard() external returns (address);\\n}\\n\",\"versionPragma\":\">=0.8.15\"},\"contracts/interfaces/dpm/IAccountGuard.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.8.15;\\n\\ninterface IAccountGuard {\\n  function owners(address) external view returns (address);\\n\\n  function owner() external view returns (address);\\n\\n  function setWhitelist(address target, bool status) external;\\n\\n  function canCall(address proxy, address operator) external view returns (bool);\\n\\n  function permit(address caller, address target, bool allowance) external;\\n\\n  function isWhitelisted(address target) external view returns (bool);\\n\\n  function isWhitelistedSend(address target) external view returns (bool);\\n}\\n\",\"versionPragma\":\">=0.8.15\"},\"contracts/interfaces/ds/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\ninterface IDSProxy {\\n  function owner() external returns (address);\\n\\n  function execute(bytes memory, bytes memory) external payable returns (address, bytes memory);\\n\\n  function execute(address, bytes memory) external payable returns (bytes memory);\\n\\n  function setCache(address _cacheAddr) external returns (bool);\\n}\\n\\ninterface IDSAuthority {\\n  function canCall(address, address, bytes4) external view returns (bool);\\n}\\n\\ninterface IDSAuth {\\n  function authority() external returns (IDSAuthority);\\n\\n  function setAuthority(IDSAuthority) external;\\n}\\n\\ninterface IDSGuard {\\n  function canCall(address, address, bytes4) external view returns (bool);\\n\\n  function permit(address, address, bytes32) external;\\n\\n  function forbid(address, address, bytes32) external;\\n}\\n\\ninterface IDSGuardFactory {\\n  function newGuard() external returns (IDSGuard);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/DS/ProxyPermission.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\n\\npragma solidity ^0.8.15;\\n\\nimport { FlashloanData } from \\\"../../core/types/Common.sol\\\";\\nimport { IAccountImplementation } from \\\"../../interfaces/dpm/IAccountImplementation.sol\\\";\\nimport { IAccountGuard } from \\\"../../interfaces/dpm/IAccountGuard.sol\\\";\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { DS_GUARD_FACTORY } from \\\"../../core/constants/Common.sol\\\";\\nimport { IDSGuardFactory, IDSGuard, IDSAuth, IDSAuthority } from \\\"../../interfaces/ds/IDSProxy.sol\\\";\\n\\ncontract ProxyPermission {\\n  IDSGuardFactory internal immutable dsGuardFactory;\\n  bytes4 public constant ALLOWED_METHOD_HASH = bytes4(keccak256(\\\"execute(address,bytes)\\\"));\\n\\n  constructor(address _dsGuardFactory) {\\n    dsGuardFactory = IDSGuardFactory(_dsGuardFactory);\\n  }\\n\\n  function givePermission(bool isDPMProxy, address _contractAddr) public {\\n    if (isDPMProxy) {\\n      // DPM permission\\n      IAccountGuard(IAccountImplementation(address(this)).guard()).permit(\\n        _contractAddr,\\n        address(this),\\n        true\\n      );\\n    } else {\\n      // DSProxy permission\\n      address currAuthority = address(IDSAuth(address(this)).authority());\\n      IDSGuard guard = IDSGuard(currAuthority);\\n      if (currAuthority == address(0)) {\\n        guard = dsGuardFactory.newGuard();\\n        IDSAuth(address(this)).setAuthority(IDSAuthority(address(guard)));\\n      }\\n\\n      if (!guard.canCall(_contractAddr, address(this), ALLOWED_METHOD_HASH)) {\\n        guard.permit(_contractAddr, address(this), ALLOWED_METHOD_HASH);\\n      }\\n    }\\n  }\\n\\n  function removePermission(bool isDPMProxy, address _contractAddr) public {\\n    if (isDPMProxy) {\\n      // DPM permission\\n      IAccountGuard(IAccountImplementation(address(this)).guard()).permit(\\n        _contractAddr,\\n        address(this),\\n        false\\n      );\\n    } else {\\n      // DSProxy permission\\n      address currAuthority = address(IDSAuth(address(this)).authority());\\n      if (currAuthority == address(0)) {\\n        return;\\n      }\\n      IDSGuard guard = IDSGuard(currAuthority);\\n      guard.forbid(_contractAddr, address(this), ALLOWED_METHOD_HASH);\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/TakeFlashloan.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Executable } from \\\"../common/Executable.sol\\\";\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { IVault } from \\\"../../interfaces/balancer/IVault.sol\\\";\\nimport { IERC3156FlashBorrower } from \\\"../../interfaces/flashloan/IERC3156FlashBorrower.sol\\\";\\nimport { IERC3156FlashLender } from \\\"../../interfaces/flashloan/IERC3156FlashLender.sol\\\";\\nimport { IFlashLoanRecipient } from \\\"../../interfaces/flashloan/balancer/IFlashLoanRecipient.sol\\\";\\nimport { FlashloanData, FlashloanProvider } from \\\"../../core/types/Common.sol\\\";\\nimport { OPERATION_EXECUTOR, DAI, CHAINLOG_VIEWER } from \\\"../../core/constants/Common.sol\\\";\\nimport { MCD_FLASH } from \\\"../../core/constants/Maker.sol\\\";\\nimport { BALANCER_VAULT } from \\\"../../core/constants/Balancer.sol\\\";\\nimport { ChainLogView } from \\\"../../core/views/ChainLogView.sol\\\";\\nimport { ProxyPermission } from \\\"../../libs/DS/ProxyPermission.sol\\\";\\nimport { IERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\n\\n/**\\n * @title TakeFlashloan Action contract\\n * @notice Executes a sequence of Actions after flashloaning funds\\n */\\ncontract TakeFlashloan is Executable, ProxyPermission {\\n  address internal immutable dai;\\n  ServiceRegistry private immutable registry;\\n\\n  constructor(\\n    ServiceRegistry _registry,\\n    address _dai,\\n    address _dsGuardFactory\\n  ) ProxyPermission(_dsGuardFactory) {\\n    registry = _registry;\\n    dai = _dai;\\n  }\\n\\n  /**\\n   * @dev When the Flashloan lender calls back the Operation Executor we may need to re-establish the calling context.\\n   * @dev The isProxyFlashloan flag is used to give the Operation Executor temporary authority to call the execute method on a user\\\"s proxy. Refers to any proxy wallet (DSProxy or DPMProxy at time of writing)\\n   * @dev isDPMProxy flag switches between regular DSPRoxy and DPMProxy\\n   * @param data Encoded calldata that conforms to the FlashloanData struct\\n   */\\n  function execute(bytes calldata data, uint8[] memory) external payable override {\\n    FlashloanData memory flData = parseInputs(data);\\n    address operationExecutorAddress = registry.getRegisteredService(OPERATION_EXECUTOR);\\n\\n    if (flData.isProxyFlashloan) {\\n      givePermission(flData.isDPMProxy, operationExecutorAddress);\\n    }\\n\\n    if (flData.provider == FlashloanProvider.DssFlash) {\\n      ChainLogView chainlogView = ChainLogView(registry.getRegisteredService(CHAINLOG_VIEWER));\\n\\n      IERC3156FlashLender(chainlogView.getServiceAddress(MCD_FLASH)).flashLoan(\\n        IERC3156FlashBorrower(operationExecutorAddress),\\n        dai,\\n        flData.amount,\\n        abi.encode(flData, address(this))\\n      );\\n    }\\n\\n    if (flData.provider == FlashloanProvider.Balancer) {\\n      IERC20[] memory tokens = new IERC20[](1);\\n      uint256[] memory amounts = new uint256[](1);\\n\\n      tokens[0] = IERC20(flData.asset);\\n      amounts[0] = flData.amount;\\n\\n      IVault(registry.getRegisteredService(BALANCER_VAULT)).flashLoan(\\n        IFlashLoanRecipient(operationExecutorAddress),\\n        tokens,\\n        amounts,\\n        abi.encode(flData, address(this))\\n      );\\n    }\\n\\n    if (flData.isProxyFlashloan) {\\n      removePermission(flData.isDPMProxy, operationExecutorAddress);\\n    }\\n  }\\n\\n  function parseInputs(bytes memory _callData) public pure returns (FlashloanData memory params) {\\n    return abi.decode(_callData, (FlashloanData));\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0xCD8B4a7Dd87F56B598B5e64ddFB0Ae5AC20C4116","bytecode":"0x60a060405234801561001057600080fd5b50604051620023a6380380620023a683398101604081905261003191610042565b6001600160a01b0316608052610072565b60006020828403121561005457600080fd5b81516001600160a01b038116811461006b57600080fd5b9392505050565b6080516122e1620000c56000396000818160f7015281816101ec015281816104d0015281816105d0015281816108030152818161090e01528181610cf001528181610efb01526110b501526122e16000f3fe60806040526004361061006b5760003560e01c806323e30c8b146100705780633fbeae9f146100a357806360ac8fe6146100c55780637b103999146100e5578063b7c9c69f14610126578063c8d78f5214610146578063f04f270714610166578063f1298ed714610186575b600080fd5b34801561007c57600080fd5b5061009061008b36600461161a565b610199565b6040519081526020015b60405180910390f35b3480156100af57600080fd5b506100c36100be366004611695565b610378565b005b3480156100d157600080fd5b506100c36100e03660046116ce565b6103c1565b3480156100f157600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b60405161009a91906116eb565b34801561013257600080fd5b506100c36101413660046116ff565b6103ef565b34801561015257600080fd5b506100c361016136600461194a565b610491565b34801561017257600080fd5b506100c36101813660046119d9565b6105ad565b6100c3610194366004611ae3565b6107c2565b6000806101a883850185611b68565b60408051808201825260128152714d6364466c6173684d696e744d6f64756c6560701b60208201529051630851f3bd60e01b81529192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd916102209190600401611c78565b602060405180830381865afa15801561023d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102619190611c8b565b905061026c816103c1565b61027a888360200151610378565b6102888883600001516103ef565b610292828a610bcd565b600061029e8888610dd2565b905080896001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016102cd91906116eb565b602060405180830381865afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190611ca8565b10156103355760405162461bcd60e51b815260040161032c90611cc1565b60405180910390fd5b6103496001600160a01b038a168383610e38565b507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99998505050505050505050565b806001600160a01b0316826001600160a01b0316146103bd57604051639f2334ed60e01b81526001600160a01b0380841660048301528216602482015260440161032c565b5050565b336001600160a01b038216146103ec5733604051633a4123a360e21b815260040161032c91906116eb565b50565b6040516370a0823160e01b81526000906001600160a01b038416906370a082319061041e9030906004016116eb565b602060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190611ca8565b90508181101561048c57604051633afe323f60e01b8152600481018290526024810183905260440161032c565b505050565b604080518082018252601381527227b832b930ba34b7b722bc32b1baba37b92f9960691b60208201529051630851f3bd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd916105049190600401611c78565b602060405180830381865afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190611c8b565b6001600160a01b0316336001600160a01b0316146105a45760405162461bcd60e51b815260206004820152601c60248201527b27b822bc32b1baba37b91d1021b0b63632b9103337b93134b23232b760211b604482015260640161032c565b6103ec81610eba565b6000846000815181106105c2576105c2611cf8565b6020026020010151905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630851f3bd6040518060400160405280600d81526020016c10985b185b98d95c95985d5b1d609a1b8152506040518263ffffffff1660e01b815260040161063f9190611c78565b602060405180830381865afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190611c8b565b9050600080848060200190518101906106999190611e3f565b915091506106a6836103c1565b6106b4848360200151610378565b6106c28483600001516103ef565b6106cc8282610bcd565b6000610715876000815181106106e4576106e4611cf8565b6020026020010151896000815181106106ff576106ff611cf8565b6020026020010151610dd290919063ffffffff16565b905080856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161074491906116eb565b602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190611ca8565b10156107a35760405162461bcd60e51b815260040161032c90611cc1565b6107b76001600160a01b03861685836111b4565b505050505050505050565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd9161083691600401611c78565b602060405180830381865afa158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190611c8b565b9050806001600160a01b031663f83d08ba6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b5050604080518082018252601481527327b832b930ba34b7b739a932b3b4b9ba393caf9960611b60208201529051630851f3bd60e01b8152600093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630851f3bd9161094291600401611c78565b602060405180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611c8b565b9050816001600160a01b03166369bd38a06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b50505050600080826001600160a01b0316631fffb05c87876040518363ffffffff1660e01b8152600401610a09929190611f11565b600060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a4e9190810190611fa4565b6040516342a4b81160e01b815291935091506001600160a01b038516906342a4b81190610a81908590859060040161205f565b600060405180830381600087803b158015610a9b57600080fd5b505af1158015610aaf573d6000803e3d6000fd5b50505050610abc87610eba565b836001600160a01b03166369bd38a06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610af757600080fd5b505af1158015610b0b573d6000803e3d6000fd5b50505050836001600160a01b031663a69df4b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b4a57600080fd5b505af1158015610b5e573d6000803e3d6000fd5b505050508585604051602001610b759291906120dc565b604051602081830303815290604052610b8d906120ec565b7f71715266c730dfceca3e44620faebf315f8e7d7404b2de5f3121d0d87c17832c88604051610bbc9190612113565b60405180910390a250505050505050565b816040015115610caf5781516020830151610bf5916001600160a01b039091169083906111b4565b806001600160a01b0316631cff79cd3063c8d78f5260e01b8560a00151604051602401610c229190612113565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b9092168252610c689291600401612196565b6000604051808303816000875af1158015610c87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048c91908101906121ba565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd91610d2391600401611c78565b602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190611c8b565b60405163d59dfd6160e01b81529091506001600160a01b0382169063d59dfd6190610d939085906004016116eb565b600060405180830381600087803b158015610dad57600080fd5b505af1158015610dc1573d6000803e3d6000fd5b5050505061048c8360a00151610eba565b600080610ddf8385612204565b905083811015610e2f5760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015260640161032c565b90505b92915050565b6040516001600160a01b038316602482015260006044820152610e9b90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111d3565b61048c8363095ea7b360e01b8484604051602401610e64929190612217565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd91610f2e91600401611c78565b602060405180830381865afa158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f9190611c8b565b90506000816001600160a01b0316634b1824a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612230565b905060005b83518110156111ae57811561108f57826001600160a01b031663e7acf55a85838151811061100a5761100a611cf8565b60200260200101516000015186848151811061102857611028611cf8565b6020026020010151604001516040518363ffffffff1660e01b815260040161105c9291909182521515602082015260400190565b600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b505050505b8381815181106110a1576110a1611cf8565b60200260200101516040015161119c5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2527b328684815181106110f4576110f4611cf8565b6020026020010151600001516040518263ffffffff1660e01b815260040161111e91815260200190565b602060405180830381865afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190611c8b565b905061119a85838151811061117657611176611cf8565b602002602001015160200151826001600160a01b03166112a590919063ffffffff16565b505b806111a68161224d565b915050610fda565b50505050565b61048c8363a9059cbb60e01b8484604051602401610e64929190612217565b6000611228826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113239092919063ffffffff16565b80519091501561048c57808060200190518101906112469190612230565b61048c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161032c565b6112ae8161133c565b6112f55760405162461bcd60e51b815260206004820152601860248201527713dc115e1958dd5d1bdc8e881a5b1b1959d85b0818d85b1b60421b604482015260640161032c565b61048c81604051806060016040528060298152602001612283602991396001600160a01b0385169190611399565b60606113328484600085611498565b90505b9392505050565b6040805160048152602481019091526020810180516001600160e01b03166310bd25b360e31b179052600090819061137390611569565b9050600061138084611569565b6001600160e01b03199081169216919091149392505050565b60606113a484611584565b6113ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161032c565b600080856001600160a01b03168560405161141a9190612266565b600060405180830381855af49150503d8060008114611455576040519150601f19603f3d011682016040523d82523d6000602084013e61145a565b606091505b5091509150811561146e5791506113359050565b80511561147e5780518082602001fd5b8360405162461bcd60e51b815260040161032c9190611c78565b60606114a385611584565b6114ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032c565b600080866001600160a01b0316858760405161150b9190612266565b60006040518083038185875af1925050503d8060008114611548576040519150601f19603f3d011682016040523d82523d6000602084013e61154d565b606091505b5091509150811561146e5791506115619050565b949350505050565b6000815160000361157c57506000919050565b506020015190565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611561575050151592915050565b6001600160a01b03811681146103ec57600080fd5b60008083601f8401126115e457600080fd5b5081356001600160401b038111156115fb57600080fd5b60208301915083602082850101111561161357600080fd5b9250929050565b60008060008060008060a0878903121561163357600080fd5b863561163e816115bd565b9550602087013561164e816115bd565b9450604087013593506060870135925060808701356001600160401b0381111561167757600080fd5b61168389828a016115d2565b979a9699509497509295939492505050565b600080604083850312156116a857600080fd5b82356116b3816115bd565b915060208301356116c3816115bd565b809150509250929050565b6000602082840312156116e057600080fd5b8135610e2f816115bd565b6001600160a01b0391909116815260200190565b6000806040838503121561171257600080fd5b823561171d816115bd565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156117635761176361172b565b60405290565b60405160c081016001600160401b03811182821017156117635761176361172b565b604051601f8201601f191681016001600160401b03811182821017156117b3576117b361172b565b604052919050565b60006001600160401b038211156117d4576117d461172b565b5060051b60200190565b60006001600160401b038211156117f7576117f761172b565b50601f01601f191660200190565b600082601f83011261181657600080fd5b8135611829611824826117de565b61178b565b81815284602083860101111561183e57600080fd5b816020850160208301376000918101602001919091529392505050565b80151581146103ec57600080fd5b600082601f83011261187a57600080fd5b8135602061188a611824836117bb565b82815260059290921b840181019181810190868411156118a957600080fd5b8286015b8481101561193f5780356001600160401b03808211156118cd5760008081fd5b908801906060828b03601f19018113156118e75760008081fd5b6118ef611741565b878401358152604080850135848111156119095760008081fd5b6119178e8b83890101611805565b838b015250938201359361192a8561185b565b810193909352505083529183019183016118ad565b509695505050505050565b60006020828403121561195c57600080fd5b81356001600160401b0381111561197257600080fd5b61156184828501611869565b600082601f83011261198f57600080fd5b8135602061199f611824836117bb565b82815260059290921b840181019181810190868411156119be57600080fd5b8286015b8481101561193f57803583529183019183016119c2565b600080600080608085870312156119ef57600080fd5b84356001600160401b0380821115611a0657600080fd5b818701915087601f830112611a1a57600080fd5b81356020611a2a611824836117bb565b82815260059290921b8401810191818101908b841115611a4957600080fd5b948201945b83861015611a70578535611a61816115bd565b82529482019490820190611a4e565b98505088013592505080821115611a8657600080fd5b611a928883890161197e565b94506040870135915080821115611aa857600080fd5b611ab48883890161197e565b93506060870135915080821115611aca57600080fd5b50611ad787828801611805565b91505092959194509250565b600080600060408486031215611af857600080fd5b83356001600160401b0380821115611b0f57600080fd5b611b1b87838801611869565b94506020860135915080821115611b3157600080fd5b50611b3e868287016115d2565b9497909650939450505050565b600281106103ec57600080fd5b8035611b6381611b4b565b919050565b600060208284031215611b7a57600080fd5b81356001600160401b0380821115611b9157600080fd5b9083019060c08286031215611ba557600080fd5b611bad611769565b823581526020830135611bbf816115bd565b60208201526040830135611bd28161185b565b60408201526060830135611be58161185b565b6060820152611bf660808401611b58565b608082015260a083013582811115611c0d57600080fd5b611c1987828601611869565b60a08301525095945050505050565b60005b83811015611c43578181015183820152602001611c2b565b50506000910152565b60008151808452611c64816020860160208601611c28565b601f01601f19169290920160200192915050565b6020815260006113356020830184611c4c565b600060208284031215611c9d57600080fd5b8151610e2f816115bd565b600060208284031215611cba57600080fd5b5051919050565b6020808252601e908201527f496e73756666696369656e742066756e647320666f72207061796261636b0000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b8051611b6381611b4b565b600082601f830112611d2a57600080fd5b8151611d38611824826117de565b818152846020838601011115611d4d57600080fd5b611561826020830160208701611c28565b600082601f830112611d6f57600080fd5b81516020611d7f611824836117bb565b82815260059290921b84018101918181019086841115611d9e57600080fd5b8286015b8481101561193f5780516001600160401b0380821115611dc25760008081fd5b908801906060828b03601f1901811315611ddc5760008081fd5b611de4611741565b87840151815260408085015184811115611dfe5760008081fd5b611e0c8e8b83890101611d19565b838b0152509382015193611e1f8561185b565b81019390935250508352918301918301611da2565b8051611b63816115bd565b60008060408385031215611e5257600080fd5b82516001600160401b0380821115611e6957600080fd5b9084019060c08287031215611e7d57600080fd5b611e85611769565b825181526020830151611e97816115bd565b60208201526040830151611eaa8161185b565b60408201526060830151611ebd8161185b565b6060820152611ece60808401611d0e565b608082015260a083015182811115611ee557600080fd5b611ef188828601611d5e565b60a0830152509350611f0891505060208401611e34565b90509250929050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082601f830112611f5157600080fd5b81516020611f61611824836117bb565b82815260059290921b84018101918181019086841115611f8057600080fd5b8286015b8481101561193f578051611f978161185b565b8352918301918301611f84565b60008060408385031215611fb757600080fd5b82516001600160401b0380821115611fce57600080fd5b818501915085601f830112611fe257600080fd5b81516020611ff2611824836117bb565b82815260059290921b8401810191818101908984111561201157600080fd5b948201945b8386101561202f57855182529482019490820190612016565b9188015191965090935050508082111561204857600080fd5b5061205585828601611f40565b9150509250929050565b604080825283519082018190526000906020906060840190828701845b828110156120985781518452928401929084019060010161207c565b5050508381038285015284518082528583019183019060005b818110156120cf5783511515835292840192918401916001016120b1565b5090979650505050505050565b8183823760009101908152919050565b8051602080830151919081101561210d576000198160200360031b1b821691505b50919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561218857603f19898403018552815160608151855288820151818a87015261216882870182611c4c565b92890151151595890195909552509487019492509086019060010161213a565b509098975050505050505050565b6001600160a01b038316815260406020820181905260009061133290830184611c4c565b6000602082840312156121cc57600080fd5b81516001600160401b038111156121e257600080fd5b61156184828501611d19565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e3257610e326121ee565b6001600160a01b03929092168252602082015260400190565b60006020828403121561224257600080fd5b8151610e2f8161185b565b60006001820161225f5761225f6121ee565b5060010190565b60008251612278818460208701611c28565b919091019291505056fe4f704578656375746f723a206c6f772d6c6576656c2064656c656761746563616c6c206661696c6564a264697066735822122005f0c65cdbe7a9853396e51fb60b9e0162abda491fcc10db897ebe32563046cf64736f6c63430008120033","deployedBytecode":"0x60806040526004361061006b5760003560e01c806323e30c8b146100705780633fbeae9f146100a357806360ac8fe6146100c55780637b103999146100e5578063b7c9c69f14610126578063c8d78f5214610146578063f04f270714610166578063f1298ed714610186575b600080fd5b34801561007c57600080fd5b5061009061008b36600461161a565b610199565b6040519081526020015b60405180910390f35b3480156100af57600080fd5b506100c36100be366004611695565b610378565b005b3480156100d157600080fd5b506100c36100e03660046116ce565b6103c1565b3480156100f157600080fd5b506101197f000000000000000000000000000000000000000000000000000000000000000081565b60405161009a91906116eb565b34801561013257600080fd5b506100c36101413660046116ff565b6103ef565b34801561015257600080fd5b506100c361016136600461194a565b610491565b34801561017257600080fd5b506100c36101813660046119d9565b6105ad565b6100c3610194366004611ae3565b6107c2565b6000806101a883850185611b68565b60408051808201825260128152714d6364466c6173684d696e744d6f64756c6560701b60208201529051630851f3bd60e01b81529192506000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd916102209190600401611c78565b602060405180830381865afa15801561023d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102619190611c8b565b905061026c816103c1565b61027a888360200151610378565b6102888883600001516103ef565b610292828a610bcd565b600061029e8888610dd2565b905080896001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016102cd91906116eb565b602060405180830381865afa1580156102ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030e9190611ca8565b10156103355760405162461bcd60e51b815260040161032c90611cc1565b60405180910390fd5b6103496001600160a01b038a168383610e38565b507f439148f0bbc682ca079e46d6e2c2f0c1e3b820f1a291b069d8882abf8cf18dd99998505050505050505050565b806001600160a01b0316826001600160a01b0316146103bd57604051639f2334ed60e01b81526001600160a01b0380841660048301528216602482015260440161032c565b5050565b336001600160a01b038216146103ec5733604051633a4123a360e21b815260040161032c91906116eb565b50565b6040516370a0823160e01b81526000906001600160a01b038416906370a082319061041e9030906004016116eb565b602060405180830381865afa15801561043b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045f9190611ca8565b90508181101561048c57604051633afe323f60e01b8152600481018290526024810183905260440161032c565b505050565b604080518082018252601381527227b832b930ba34b7b722bc32b1baba37b92f9960691b60208201529051630851f3bd60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd916105049190600401611c78565b602060405180830381865afa158015610521573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105459190611c8b565b6001600160a01b0316336001600160a01b0316146105a45760405162461bcd60e51b815260206004820152601c60248201527b27b822bc32b1baba37b91d1021b0b63632b9103337b93134b23232b760211b604482015260640161032c565b6103ec81610eba565b6000846000815181106105c2576105c2611cf8565b6020026020010151905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630851f3bd6040518060400160405280600d81526020016c10985b185b98d95c95985d5b1d609a1b8152506040518263ffffffff1660e01b815260040161063f9190611c78565b602060405180830381865afa15801561065c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106809190611c8b565b9050600080848060200190518101906106999190611e3f565b915091506106a6836103c1565b6106b4848360200151610378565b6106c28483600001516103ef565b6106cc8282610bcd565b6000610715876000815181106106e4576106e4611cf8565b6020026020010151896000815181106106ff576106ff611cf8565b6020026020010151610dd290919063ffffffff16565b905080856001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161074491906116eb565b602060405180830381865afa158015610761573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107859190611ca8565b10156107a35760405162461bcd60e51b815260040161032c90611cc1565b6107b76001600160a01b03861685836111b4565b505050505050505050565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd9161083691600401611c78565b602060405180830381865afa158015610853573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108779190611c8b565b9050806001600160a01b031663f83d08ba6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156108b457600080fd5b505af11580156108c8573d6000803e3d6000fd5b5050604080518082018252601481527327b832b930ba34b7b739a932b3b4b9ba393caf9960611b60208201529051630851f3bd60e01b8152600093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169250630851f3bd9161094291600401611c78565b602060405180830381865afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109839190611c8b565b9050816001600160a01b03166369bd38a06040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b50505050600080826001600160a01b0316631fffb05c87876040518363ffffffff1660e01b8152600401610a09929190611f11565b600060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a4e9190810190611fa4565b6040516342a4b81160e01b815291935091506001600160a01b038516906342a4b81190610a81908590859060040161205f565b600060405180830381600087803b158015610a9b57600080fd5b505af1158015610aaf573d6000803e3d6000fd5b50505050610abc87610eba565b836001600160a01b03166369bd38a06040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610af757600080fd5b505af1158015610b0b573d6000803e3d6000fd5b50505050836001600160a01b031663a69df4b56040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b4a57600080fd5b505af1158015610b5e573d6000803e3d6000fd5b505050508585604051602001610b759291906120dc565b604051602081830303815290604052610b8d906120ec565b7f71715266c730dfceca3e44620faebf315f8e7d7404b2de5f3121d0d87c17832c88604051610bbc9190612113565b60405180910390a250505050505050565b816040015115610caf5781516020830151610bf5916001600160a01b039091169083906111b4565b806001600160a01b0316631cff79cd3063c8d78f5260e01b8560a00151604051602401610c229190612113565b60408051601f198184030181529181526020820180516001600160e01b03166001600160e01b03199485161790525160e085901b9092168252610c689291600401612196565b6000604051808303816000875af1158015610c87573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261048c91908101906121ba565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd91610d2391600401611c78565b602060405180830381865afa158015610d40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d649190611c8b565b60405163d59dfd6160e01b81529091506001600160a01b0382169063d59dfd6190610d939085906004016116eb565b600060405180830381600087803b158015610dad57600080fd5b505af1158015610dc1573d6000803e3d6000fd5b5050505061048c8360a00151610eba565b600080610ddf8385612204565b905083811015610e2f5760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b604482015260640161032c565b90505b92915050565b6040516001600160a01b038316602482015260006044820152610e9b90849063095ea7b360e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526111d3565b61048c8363095ea7b360e01b8484604051602401610e64929190612217565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd91610f2e91600401611c78565b602060405180830381865afa158015610f4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6f9190611c8b565b90506000816001600160a01b0316634b1824a46040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fb1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd59190612230565b905060005b83518110156111ae57811561108f57826001600160a01b031663e7acf55a85838151811061100a5761100a611cf8565b60200260200101516000015186848151811061102857611028611cf8565b6020026020010151604001516040518363ffffffff1660e01b815260040161105c9291909182521515602082015260400190565b600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b505050505b8381815181106110a1576110a1611cf8565b60200260200101516040015161119c5760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c2527b328684815181106110f4576110f4611cf8565b6020026020010151600001516040518263ffffffff1660e01b815260040161111e91815260200190565b602060405180830381865afa15801561113b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115f9190611c8b565b905061119a85838151811061117657611176611cf8565b602002602001015160200151826001600160a01b03166112a590919063ffffffff16565b505b806111a68161224d565b915050610fda565b50505050565b61048c8363a9059cbb60e01b8484604051602401610e64929190612217565b6000611228826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166113239092919063ffffffff16565b80519091501561048c57808060200190518101906112469190612230565b61048c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161032c565b6112ae8161133c565b6112f55760405162461bcd60e51b815260206004820152601860248201527713dc115e1958dd5d1bdc8e881a5b1b1959d85b0818d85b1b60421b604482015260640161032c565b61048c81604051806060016040528060298152602001612283602991396001600160a01b0385169190611399565b60606113328484600085611498565b90505b9392505050565b6040805160048152602481019091526020810180516001600160e01b03166310bd25b360e31b179052600090819061137390611569565b9050600061138084611569565b6001600160e01b03199081169216919091149392505050565b60606113a484611584565b6113ff5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161032c565b600080856001600160a01b03168560405161141a9190612266565b600060405180830381855af49150503d8060008114611455576040519150601f19603f3d011682016040523d82523d6000602084013e61145a565b606091505b5091509150811561146e5791506113359050565b80511561147e5780518082602001fd5b8360405162461bcd60e51b815260040161032c9190611c78565b60606114a385611584565b6114ef5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161032c565b600080866001600160a01b0316858760405161150b9190612266565b60006040518083038185875af1925050503d8060008114611548576040519150601f19603f3d011682016040523d82523d6000602084013e61154d565b606091505b5091509150811561146e5791506115619050565b949350505050565b6000815160000361157c57506000919050565b506020015190565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590611561575050151592915050565b6001600160a01b03811681146103ec57600080fd5b60008083601f8401126115e457600080fd5b5081356001600160401b038111156115fb57600080fd5b60208301915083602082850101111561161357600080fd5b9250929050565b60008060008060008060a0878903121561163357600080fd5b863561163e816115bd565b9550602087013561164e816115bd565b9450604087013593506060870135925060808701356001600160401b0381111561167757600080fd5b61168389828a016115d2565b979a9699509497509295939492505050565b600080604083850312156116a857600080fd5b82356116b3816115bd565b915060208301356116c3816115bd565b809150509250929050565b6000602082840312156116e057600080fd5b8135610e2f816115bd565b6001600160a01b0391909116815260200190565b6000806040838503121561171257600080fd5b823561171d816115bd565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156117635761176361172b565b60405290565b60405160c081016001600160401b03811182821017156117635761176361172b565b604051601f8201601f191681016001600160401b03811182821017156117b3576117b361172b565b604052919050565b60006001600160401b038211156117d4576117d461172b565b5060051b60200190565b60006001600160401b038211156117f7576117f761172b565b50601f01601f191660200190565b600082601f83011261181657600080fd5b8135611829611824826117de565b61178b565b81815284602083860101111561183e57600080fd5b816020850160208301376000918101602001919091529392505050565b80151581146103ec57600080fd5b600082601f83011261187a57600080fd5b8135602061188a611824836117bb565b82815260059290921b840181019181810190868411156118a957600080fd5b8286015b8481101561193f5780356001600160401b03808211156118cd5760008081fd5b908801906060828b03601f19018113156118e75760008081fd5b6118ef611741565b878401358152604080850135848111156119095760008081fd5b6119178e8b83890101611805565b838b015250938201359361192a8561185b565b810193909352505083529183019183016118ad565b509695505050505050565b60006020828403121561195c57600080fd5b81356001600160401b0381111561197257600080fd5b61156184828501611869565b600082601f83011261198f57600080fd5b8135602061199f611824836117bb565b82815260059290921b840181019181810190868411156119be57600080fd5b8286015b8481101561193f57803583529183019183016119c2565b600080600080608085870312156119ef57600080fd5b84356001600160401b0380821115611a0657600080fd5b818701915087601f830112611a1a57600080fd5b81356020611a2a611824836117bb565b82815260059290921b8401810191818101908b841115611a4957600080fd5b948201945b83861015611a70578535611a61816115bd565b82529482019490820190611a4e565b98505088013592505080821115611a8657600080fd5b611a928883890161197e565b94506040870135915080821115611aa857600080fd5b611ab48883890161197e565b93506060870135915080821115611aca57600080fd5b50611ad787828801611805565b91505092959194509250565b600080600060408486031215611af857600080fd5b83356001600160401b0380821115611b0f57600080fd5b611b1b87838801611869565b94506020860135915080821115611b3157600080fd5b50611b3e868287016115d2565b9497909650939450505050565b600281106103ec57600080fd5b8035611b6381611b4b565b919050565b600060208284031215611b7a57600080fd5b81356001600160401b0380821115611b9157600080fd5b9083019060c08286031215611ba557600080fd5b611bad611769565b823581526020830135611bbf816115bd565b60208201526040830135611bd28161185b565b60408201526060830135611be58161185b565b6060820152611bf660808401611b58565b608082015260a083013582811115611c0d57600080fd5b611c1987828601611869565b60a08301525095945050505050565b60005b83811015611c43578181015183820152602001611c2b565b50506000910152565b60008151808452611c64816020860160208601611c28565b601f01601f19169290920160200192915050565b6020815260006113356020830184611c4c565b600060208284031215611c9d57600080fd5b8151610e2f816115bd565b600060208284031215611cba57600080fd5b5051919050565b6020808252601e908201527f496e73756666696369656e742066756e647320666f72207061796261636b0000604082015260600190565b634e487b7160e01b600052603260045260246000fd5b8051611b6381611b4b565b600082601f830112611d2a57600080fd5b8151611d38611824826117de565b818152846020838601011115611d4d57600080fd5b611561826020830160208701611c28565b600082601f830112611d6f57600080fd5b81516020611d7f611824836117bb565b82815260059290921b84018101918181019086841115611d9e57600080fd5b8286015b8481101561193f5780516001600160401b0380821115611dc25760008081fd5b908801906060828b03601f1901811315611ddc5760008081fd5b611de4611741565b87840151815260408085015184811115611dfe5760008081fd5b611e0c8e8b83890101611d19565b838b0152509382015193611e1f8561185b565b81019390935250508352918301918301611da2565b8051611b63816115bd565b60008060408385031215611e5257600080fd5b82516001600160401b0380821115611e6957600080fd5b9084019060c08287031215611e7d57600080fd5b611e85611769565b825181526020830151611e97816115bd565b60208201526040830151611eaa8161185b565b60408201526060830151611ebd8161185b565b6060820152611ece60808401611d0e565b608082015260a083015182811115611ee557600080fd5b611ef188828601611d5e565b60a0830152509350611f0891505060208401611e34565b90509250929050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b600082601f830112611f5157600080fd5b81516020611f61611824836117bb565b82815260059290921b84018101918181019086841115611f8057600080fd5b8286015b8481101561193f578051611f978161185b565b8352918301918301611f84565b60008060408385031215611fb757600080fd5b82516001600160401b0380821115611fce57600080fd5b818501915085601f830112611fe257600080fd5b81516020611ff2611824836117bb565b82815260059290921b8401810191818101908984111561201157600080fd5b948201945b8386101561202f57855182529482019490820190612016565b9188015191965090935050508082111561204857600080fd5b5061205585828601611f40565b9150509250929050565b604080825283519082018190526000906020906060840190828701845b828110156120985781518452928401929084019060010161207c565b5050508381038285015284518082528583019183019060005b818110156120cf5783511515835292840192918401916001016120b1565b5090979650505050505050565b8183823760009101908152919050565b8051602080830151919081101561210d576000198160200360031b1b821691505b50919050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561218857603f19898403018552815160608151855288820151818a87015261216882870182611c4c565b92890151151595890195909552509487019492509086019060010161213a565b509098975050505050505050565b6001600160a01b038316815260406020820181905260009061133290830184611c4c565b6000602082840312156121cc57600080fd5b81516001600160401b038111156121e257600080fd5b61156184828501611d19565b634e487b7160e01b600052601160045260246000fd5b80820180821115610e3257610e326121ee565b6001600160a01b03929092168252602082015260400190565b60006020828403121561224257600080fd5b8151610e2f8161185b565b60006001820161225f5761225f6121ee565b5060010190565b60008251612278818460208701611c28565b919091019291505056fe4f704578656375746f723a206c6f772d6c6576656c2064656c656761746563616c6c206661696c6564a264697066735822122005f0c65cdbe7a9853396e51fb60b9e0162abda491fcc10db897ebe32563046cf64736f6c63430008120033","abi":[{"inputs":[{"internalType":"contract ServiceRegistry","name":"_registry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"flashloaned","type":"uint256"},{"internalType":"uint256","name":"required","type":"uint256"}],"name":"InconsistentAmount","type":"error"},{"inputs":[{"internalType":"address","name":"flashloaned","type":"address"},{"internalType":"address","name":"required","type":"address"}],"name":"InconsistentAsset","type":"error"},{"inputs":[{"internalType":"address","name":"lender","type":"address"}],"name":"UntrustedLender","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"name","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"targetHash","type":"bytes32"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bool","name":"skipped","type":"bool"}],"indexed":false,"internalType":"struct Call[]","name":"calls","type":"tuple[]"}],"name":"Operation","type":"event"},{"inputs":[{"components":[{"internalType":"bytes32","name":"targetHash","type":"bytes32"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bool","name":"skipped","type":"bool"}],"internalType":"struct Call[]","name":"calls","type":"tuple[]"}],"name":"callbackAggregate","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"requiredAmount","type":"uint256"}],"name":"checkIfFlashloanedAmountIsTheRequiredOne","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"flashloaned","type":"address"},{"internalType":"address","name":"required","type":"address"}],"name":"checkIfFlashloanedAssetIsTheRequiredOne","outputs":[],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"lender","type":"address"}],"name":"checkIfLenderIsTrusted","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"targetHash","type":"bytes32"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"bool","name":"skipped","type":"bool"}],"internalType":"struct Call[]","name":"calls","type":"tuple[]"},{"internalType":"string","name":"operationName","type":"string"}],"name":"executeOp","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"initiator","type":"address"},{"internalType":"address","name":"asset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onFlashLoan","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"},{"internalType":"uint256[]","name":"feeAmounts","type":"uint256[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"receiveFlashLoan","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"registry","outputs":[{"internalType":"contract ServiceRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}