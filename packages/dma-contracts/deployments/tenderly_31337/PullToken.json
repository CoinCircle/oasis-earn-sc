{"metadata":"{\"defaultCompiler\":{\"version\":\"0.4.21\"},\"sources\":{\"contracts/actions/common/PullToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Executable } from \\\"../common/Executable.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\nimport { PullTokenData } from \\\"../../core/types/Common.sol\\\";\\nimport \\\"../../core/types/Common.sol\\\";\\n\\n/**\\n * @title PullToken Action contract\\n * @notice Pulls token from a target address to the current calling context\\n */\\ncontract PullToken is Executable {\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * @dev Is intended to pull tokens in to a user's proxy (the calling context)\\n   * @param data Encoded calldata that conforms to the PullTokenData struct\\n   */\\n  function execute(bytes calldata data, uint8[] memory) external payable override {\\n    PullTokenData memory pull = parseInputs(data);\\n\\n    IERC20(pull.asset).safeTransferFrom(pull.from, address(this), pull.amount);\\n  }\\n\\n  function parseInputs(bytes memory _callData) public pure returns (PullTokenData memory params) {\\n    return abi.decode(_callData, (PullTokenData));\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/Executable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Shared Action Executable interface\\n * @notice Provides a dma-common interface for an execute method to all Action\\n */\\ninterface Executable {\\n  function execute(bytes calldata data, uint8[] memory paramsMap) external payable;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nenum FlashloanProvider {\\n  DssFlash,\\n  Balancer\\n}\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  address asset;\\n  bool isProxyFlashloan;\\n  bool isDPMProxy;\\n  FlashloanProvider provider;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"}}}","address":"0xdC042d928e41b324Aa22FAb10c641BEfD53cc37F","bytecode":"0x608060405234801561001057600080fd5b506106da806100206000396000f3fe6080604052600436106100295760003560e01c806385e92d981461002e5780639093410d14610043575b600080fd5b61004161003c3660046103e0565b610097565b005b34801561004f57600080fd5b5061006361005e3660046104f1565b610103565b6040805182516001600160a01b03908116825260208085015190911690820152918101519082015260600160405180910390f35b60006100d884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061010392505050565b6020810151604082015182519293506100fd926001600160a01b031691903090610138565b50505050565b6040805160608101825260008082526020808301829052928201528251909161013291840181019084016105a1565b92915050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180516001600160e01b03166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526100fd928792916000916101d0918516908490610257565b80519091501561025257808060200190518101906101ee9190610608565b6102525760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b6060610266848460008561026e565b949350505050565b606061027985610361565b6102c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610249565b600080866001600160a01b031685876040516102e19190610655565b60006040518083038185875af1925050503d806000811461031e576040519150601f19603f3d011682016040523d82523d6000602084013e610323565b606091505b509150915081156103375791506102669050565b8051156103475780518082602001fd5b8360405162461bcd60e51b81526004016102499190610671565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610266575050151592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156103d8576103d861039a565b604052919050565b6000806000604084860312156103f557600080fd5b83356001600160401b038082111561040c57600080fd5b818601915086601f83011261042057600080fd5b81358181111561042f57600080fd5b6020888183860101111561044257600080fd5b80840196508195508088013593508284111561045d57600080fd5b838801935088601f85011261047157600080fd5b83359150828211156104855761048561039a565b8160051b92506104968184016103b0565b828152928401810192818101908a8511156104b057600080fd5b948201945b848610156104e1578535935060ff841684146104d15760008081fd5b83825294820194908201906104b5565b8096505050505050509250925092565b6000602080838503121561050457600080fd5b82356001600160401b038082111561051b57600080fd5b818501915085601f83011261052f57600080fd5b8135818111156105415761054161039a565b610553601f8201601f191685016103b0565b9150808252868482850101111561056957600080fd5b8084840185840137600090820190930192909252509392505050565b80516001600160a01b038116811461059c57600080fd5b919050565b6000606082840312156105b357600080fd5b604051606081016001600160401b03811182821017156105d5576105d561039a565b6040526105e183610585565b81526105ef60208401610585565b6020820152604083015160408201528091505092915050565b60006020828403121561061a57600080fd5b8151801515811461062a57600080fd5b9392505050565b60005b8381101561064c578181015183820152602001610634565b50506000910152565b60008251610667818460208701610631565b9190910192915050565b6020815260008251806020840152610690816040850160208701610631565b601f01601f1916919091016040019291505056fea2646970667358221220b4dd3eb786ce7b35505803c5a444dbae94e78c1569bd0c4c11f2c01aa8f2dbb964736f6c63430008120033","deployedBytecode":"0x6080604052600436106100295760003560e01c806385e92d981461002e5780639093410d14610043575b600080fd5b61004161003c3660046103e0565b610097565b005b34801561004f57600080fd5b5061006361005e3660046104f1565b610103565b6040805182516001600160a01b03908116825260208085015190911690820152918101519082015260600160405180910390f35b60006100d884848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061010392505050565b6020810151604082015182519293506100fd926001600160a01b031691903090610138565b50505050565b6040805160608101825260008082526020808301829052928201528251909161013291840181019084016105a1565b92915050565b604080516001600160a01b038581166024830152848116604483015260648083018590528351808403909101815260849092018352602080830180516001600160e01b03166323b872dd60e01b17905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526100fd928792916000916101d0918516908490610257565b80519091501561025257808060200190518101906101ee9190610608565b6102525760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b505050565b6060610266848460008561026e565b949350505050565b606061027985610361565b6102c55760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610249565b600080866001600160a01b031685876040516102e19190610655565b60006040518083038185875af1925050503d806000811461031e576040519150601f19603f3d011682016040523d82523d6000602084013e610323565b606091505b509150915081156103375791506102669050565b8051156103475780518082602001fd5b8360405162461bcd60e51b81526004016102499190610671565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610266575050151592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156103d8576103d861039a565b604052919050565b6000806000604084860312156103f557600080fd5b83356001600160401b038082111561040c57600080fd5b818601915086601f83011261042057600080fd5b81358181111561042f57600080fd5b6020888183860101111561044257600080fd5b80840196508195508088013593508284111561045d57600080fd5b838801935088601f85011261047157600080fd5b83359150828211156104855761048561039a565b8160051b92506104968184016103b0565b828152928401810192818101908a8511156104b057600080fd5b948201945b848610156104e1578535935060ff841684146104d15760008081fd5b83825294820194908201906104b5565b8096505050505050509250925092565b6000602080838503121561050457600080fd5b82356001600160401b038082111561051b57600080fd5b818501915085601f83011261052f57600080fd5b8135818111156105415761054161039a565b610553601f8201601f191685016103b0565b9150808252868482850101111561056957600080fd5b8084840185840137600090820190930192909252509392505050565b80516001600160a01b038116811461059c57600080fd5b919050565b6000606082840312156105b357600080fd5b604051606081016001600160401b03811182821017156105d5576105d561039a565b6040526105e183610585565b81526105ef60208401610585565b6020820152604083015160408201528091505092915050565b60006020828403121561061a57600080fd5b8151801515811461062a57600080fd5b9392505050565b60005b8381101561064c578181015183820152602001610634565b50506000910152565b60008251610667818460208701610631565b9190910192915050565b6020815260008251806020840152610690816040850160208701610631565b601f01601f1916919091016040019291505056fea2646970667358221220b4dd3eb786ce7b35505803c5a444dbae94e78c1569bd0c4c11f2c01aa8f2dbb964736f6c63430008120033","abi":[{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8[]","name":"","type":"uint8[]"}],"name":"execute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_callData","type":"bytes"}],"name":"parseInputs","outputs":[{"components":[{"internalType":"address","name":"asset","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct PullTokenData","name":"params","type":"tuple"}],"stateMutability":"pure","type":"function"}]}