{"metadata":"{\"defaultCompiler\":{\"version\":\"0.4.21\"},\"sources\":{\"contracts/actions/common/ReturnFunds.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Executable } from \\\"../common/Executable.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\nimport { ReturnFundsData } from \\\"../../core/types/Common.sol\\\";\\nimport { IDSProxy } from \\\"../../interfaces/ds/IDSProxy.sol\\\";\\nimport { ETH } from \\\"../../core/constants/Common.sol\\\";\\n\\n/**\\n * @title ReturnFunds Action contract\\n * @notice Returns funds sitting on a user's proxy to a user's EOA\\n */\\ncontract ReturnFunds is Executable {\\n  using SafeERC20 for IERC20;\\n\\n  /**\\n   * @param data Encoded calldata that conforms to the ReturnFundsData struct\\n   */\\n  function execute(bytes calldata data, uint8[] memory) external payable override {\\n    ReturnFundsData memory returnData = abi.decode(data, (ReturnFundsData));\\n    address owner = IDSProxy(payable(address(this))).owner();\\n    uint256 amount;\\n\\n    if (returnData.asset == ETH) {\\n      amount = address(this).balance;\\n      payable(owner).transfer(amount);\\n    } else {\\n      amount = IERC20(returnData.asset).balanceOf(address(this));\\n      IERC20(returnData.asset).safeTransfer(owner, amount);\\n    }\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/Executable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Shared Action Executable interface\\n * @notice Provides a dma-common interface for an execute method to all Action\\n */\\ninterface Executable {\\n  function execute(bytes calldata data, uint8[] memory paramsMap) external payable;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nenum FlashloanProvider {\\n  DssFlash,\\n  Balancer\\n}\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  address asset;\\n  bool isProxyFlashloan;\\n  bool isDPMProxy;\\n  FlashloanProvider provider;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant CHAINLOG_VIEWER = \\\"ChainLogView\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator\\\";\\nstring constant DS_GUARD_FACTORY = \\\"DSGuardFactory\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10 ** 27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action dma-contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/interfaces/ds/IDSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\ninterface IDSProxy {\\n  function owner() external returns (address);\\n\\n  function execute(bytes memory, bytes memory) external payable returns (address, bytes memory);\\n\\n  function execute(address, bytes memory) external payable returns (bytes memory);\\n\\n  function setCache(address _cacheAddr) external returns (bool);\\n}\\n\\ninterface IDSAuthority {\\n  function canCall(address, address, bytes4) external view returns (bool);\\n}\\n\\ninterface IDSAuth {\\n  function authority() external returns (IDSAuthority);\\n\\n  function setAuthority(IDSAuthority) external;\\n}\\n\\ninterface IDSGuard {\\n  function canCall(address, address, bytes4) external view returns (bool);\\n\\n  function permit(address, address, bytes32) external;\\n\\n  function forbid(address, address, bytes32) external;\\n}\\n\\ninterface IDSGuardFactory {\\n  function newGuard() external returns (IDSGuard);\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0xaCB6Ae9d3ff461b4d09aD0505fb80f8053b06AF1","bytecode":"0x608060405234801561001057600080fd5b506106e1806100206000396000f3fe60806040526004361061001e5760003560e01c806385e92d9814610023575b600080fd5b610036610031366004610465565b610038565b005b60006100468385018561058e565b90506000306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561008a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ae91906105d9565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031683600001516001600160a01b031603610122575060405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561011c573d6000803e3d6000fd5b506101a6565b82516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018d91906105fd565b83519091506101a6906001600160a01b031683836101ae565b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610200908490610205565b505050565b600061025a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166102dc9092919063ffffffff16565b80519091501561020057808060200190518101906102789190610616565b6102005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606102eb84846000856102f3565b949350505050565b60606102fe856103e6565b61034a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d3565b600080866001600160a01b03168587604051610366919061065c565b60006040518083038185875af1925050503d80600081146103a3576040519150601f19603f3d011682016040523d82523d6000602084013e6103a8565b606091505b509150915081156103bc5791506102eb9050565b8051156103cc5780518082602001fd5b8360405162461bcd60e51b81526004016102d39190610678565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906102eb575050151592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561045d5761045d61041f565b604052919050565b60008060006040848603121561047a57600080fd5b83356001600160401b038082111561049157600080fd5b818601915086601f8301126104a557600080fd5b8135818111156104b457600080fd5b602088818386010111156104c757600080fd5b8084019650819550808801359350828411156104e257600080fd5b838801935088601f8501126104f657600080fd5b833591508282111561050a5761050a61041f565b8160051b925061051b818401610435565b828152928401810192818101908a85111561053557600080fd5b948201945b84861015610566578535935060ff841684146105565760008081fd5b838252948201949082019061053a565b8096505050505050509250925092565b6001600160a01b038116811461058b57600080fd5b50565b6000602082840312156105a057600080fd5b604051602081016001600160401b03811182821017156105c2576105c261041f565b60405282356105d081610576565b81529392505050565b6000602082840312156105eb57600080fd5b81516105f681610576565b9392505050565b60006020828403121561060f57600080fd5b5051919050565b60006020828403121561062857600080fd5b815180151581146105f657600080fd5b60005b8381101561065357818101518382015260200161063b565b50506000910152565b6000825161066e818460208701610638565b9190910192915050565b6020815260008251806020840152610697816040850160208701610638565b601f01601f1916919091016040019291505056fea26469706673582212208e32c79f8144a247ef3b2cedbf820e27bbf6f866119c9485fef0f6c5c171ed3e64736f6c63430008120033","deployedBytecode":"0x60806040526004361061001e5760003560e01c806385e92d9814610023575b600080fd5b610036610031366004610465565b610038565b005b60006100468385018561058e565b90506000306001600160a01b0316638da5cb5b6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561008a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100ae91906105d9565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031683600001516001600160a01b031603610122575060405147906001600160a01b0383169082156108fc029083906000818181858888f1935050505015801561011c573d6000803e3d6000fd5b506101a6565b82516040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015610169573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018d91906105fd565b83519091506101a6906001600160a01b031683836101ae565b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610200908490610205565b505050565b600061025a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166102dc9092919063ffffffff16565b80519091501561020057808060200190518101906102789190610616565b6102005760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084015b60405180910390fd5b60606102eb84846000856102f3565b949350505050565b60606102fe856103e6565b61034a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016102d3565b600080866001600160a01b03168587604051610366919061065c565b60006040518083038185875af1925050503d80600081146103a3576040519150601f19603f3d011682016040523d82523d6000602084013e6103a8565b606091505b509150915081156103bc5791506102eb9050565b8051156103cc5780518082602001fd5b8360405162461bcd60e51b81526004016102d39190610678565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a4708181148015906102eb575050151592915050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561045d5761045d61041f565b604052919050565b60008060006040848603121561047a57600080fd5b83356001600160401b038082111561049157600080fd5b818601915086601f8301126104a557600080fd5b8135818111156104b457600080fd5b602088818386010111156104c757600080fd5b8084019650819550808801359350828411156104e257600080fd5b838801935088601f8501126104f657600080fd5b833591508282111561050a5761050a61041f565b8160051b925061051b818401610435565b828152928401810192818101908a85111561053557600080fd5b948201945b84861015610566578535935060ff841684146105565760008081fd5b838252948201949082019061053a565b8096505050505050509250925092565b6001600160a01b038116811461058b57600080fd5b50565b6000602082840312156105a057600080fd5b604051602081016001600160401b03811182821017156105c2576105c261041f565b60405282356105d081610576565b81529392505050565b6000602082840312156105eb57600080fd5b81516105f681610576565b9392505050565b60006020828403121561060f57600080fd5b5051919050565b60006020828403121561062857600080fd5b815180151581146105f657600080fd5b60005b8381101561065357818101518382015260200161063b565b50506000910152565b6000825161066e818460208701610638565b9190910192915050565b6020815260008251806020840152610697816040850160208701610638565b601f01601f1916919091016040019291505056fea26469706673582212208e32c79f8144a247ef3b2cedbf820e27bbf6f866119c9485fef0f6c5c171ed3e64736f6c63430008120033","abi":[{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8[]","name":"","type":"uint8[]"}],"name":"execute","outputs":[],"stateMutability":"payable","type":"function"}]}