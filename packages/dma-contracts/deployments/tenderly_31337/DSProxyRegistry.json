{"metadata":"{\"defaultCompiler\":{\"version\":\"0.4.21\"},\"sources\":{\"contracts/libs/DS/DSProxyRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport {DSProxy, DSProxyFactory} from './DSProxy.sol';\\n\\n// This Registry deploys new proxy instances through DSProxyFactory.build(address) and keeps a registry of owner => proxy\\ncontract DSProxyRegistry {\\n  mapping(address => DSProxy) public proxies;\\n  DSProxyFactory factory;\\n\\n  constructor(address factory_) public {\\n    factory = DSProxyFactory(factory_);\\n  }\\n\\n  // deploys a new proxy instance\\n  // sets owner of proxy to caller\\n  function build() public returns (address payable proxy) {\\n    proxy = build(msg.sender);\\n  }\\n\\n  // deploys a new proxy instance\\n  // sets custom owner of proxy\\n  function build(address owner) public returns (address payable proxy) {\\n    require(proxies[owner] == DSProxy(0) || proxies[owner].owner() != owner); // Not allow new proxy if the user already has one and remains being the owner\\n    proxy = factory.build(owner);\\n    proxies[owner] = DSProxy(proxy);\\n  }\\n}\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/libs/DS/DSAuth.sol\":{\"content\":\"// SPDX-License-Identifier: GNU-3\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.4.23;\\n\\ninterface DSAuthority {\\n  function canCall(address src, address dst, bytes4 sig) external view returns (bool);\\n}\\n\\ncontract DSAuthEvents {\\n  event LogSetAuthority(address indexed authority);\\n  event LogSetOwner(address indexed owner);\\n}\\n\\ncontract DSAuth is DSAuthEvents {\\n  DSAuthority public authority;\\n  address public owner;\\n\\n  constructor() public {\\n    owner = msg.sender;\\n    emit LogSetOwner(msg.sender);\\n  }\\n\\n  function setOwner(address owner_) public auth {\\n    owner = owner_;\\n    emit LogSetOwner(owner);\\n  }\\n\\n  function setAuthority(DSAuthority authority_) public auth {\\n    authority = authority_;\\n    emit LogSetAuthority(address(authority));\\n  }\\n\\n  modifier auth() {\\n    require(isAuthorized(msg.sender, msg.sig), \\\"ds-auth-unauthorized\\\");\\n    _;\\n  }\\n\\n  function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\\n    if (src == address(this)) {\\n      return true;\\n    } else if (src == owner) {\\n      return true;\\n    } else if (authority == DSAuthority(address(0))) {\\n      return false;\\n    } else {\\n      return authority.canCall(src, address(this), sig);\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.4.23\"},\"contracts/libs/DS/DSNote.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.24;\\n\\ncontract DSNote {\\n  event LogNote(\\n    bytes4 indexed sig,\\n    address indexed guy,\\n    bytes32 indexed foo,\\n    bytes32 indexed bar,\\n    uint256 wad,\\n    bytes fax\\n  ) anonymous;\\n\\n  modifier note() {\\n    bytes32 foo;\\n    bytes32 bar;\\n\\n    assembly {\\n      foo := calldataload(4)\\n      bar := calldataload(36)\\n    }\\n\\n    emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\\n\\n    _;\\n  }\\n}\\n\",\"versionPragma\":\">=0.4.24\"},\"contracts/libs/DS/DSProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0 <0.6.0;\\n\\nimport { DSAuth } from \\\"./DSAuth.sol\\\";\\nimport { DSNote } from \\\"./DSNote.sol\\\";\\n\\ncontract DSProxy is DSAuth, DSNote {\\n  DSProxyCache public cache; // global cache for dma-contracts\\n\\n  constructor(address _cacheAddr) public {\\n    setCache(_cacheAddr);\\n  }\\n\\n  function() external payable {}\\n\\n  // use the proxy to execute calldata _data on contract _code\\n  function execute(\\n    bytes memory _code,\\n    bytes memory _data\\n  ) public payable returns (address target, bytes memory response) {\\n    target = cache.read(_code);\\n    if (target == address(0)) {\\n      // deploy contract & store its address in cache\\n      target = cache.write(_code);\\n    }\\n\\n    response = execute(target, _data);\\n  }\\n\\n  function execute(\\n    address _target,\\n    bytes memory _data\\n  ) public payable auth note returns (bytes memory response) {\\n    require(_target != address(0), \\\"ds-proxy-target-address-required\\\");\\n\\n    // call contract in current context\\n    assembly {\\n      let succeeded := delegatecall(sub(gas, 5000), _target, add(_data, 0x20), mload(_data), 0, 0)\\n      let size := returndatasize\\n\\n      response := mload(0x40)\\n      mstore(0x40, add(response, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n      mstore(response, size)\\n      returndatacopy(add(response, 0x20), 0, size)\\n\\n      switch iszero(succeeded)\\n      case 1 {\\n        // throw if delegatecall failed\\n        revert(add(response, 0x20), size)\\n      }\\n    }\\n  }\\n\\n  //set new cache\\n  function setCache(address _cacheAddr) public payable auth note returns (bool) {\\n    require(_cacheAddr != address(0), \\\"ds-proxy-cache-address-required\\\");\\n    cache = DSProxyCache(_cacheAddr); // overwrite cache\\n    return true;\\n  }\\n}\\n\\ncontract DSProxyFactory {\\n  event Created(address indexed sender, address indexed owner, address proxy, address cache);\\n  mapping(address => bool) public isProxy;\\n  DSProxyCache public cache;\\n\\n  constructor() public {\\n    cache = new DSProxyCache();\\n  }\\n\\n  // deploys a new proxy instance\\n  // sets owner of proxy to caller\\n  function build() public returns (address payable proxy) {\\n    proxy = build(msg.sender);\\n  }\\n\\n  // deploys a new proxy instance\\n  // sets custom owner of proxy\\n  function build(address owner) public returns (address payable proxy) {\\n    proxy = address(new DSProxy(address(cache)));\\n    emit Created(msg.sender, owner, address(proxy), address(cache));\\n    DSProxy(proxy).setOwner(owner);\\n    isProxy[proxy] = true;\\n  }\\n}\\n\\ncontract DSProxyCache {\\n  mapping(bytes32 => address) cache;\\n\\n  function read(bytes memory _code) public view returns (address) {\\n    bytes32 hash = keccak256(_code);\\n    return cache[hash];\\n  }\\n\\n  function write(bytes memory _code) public returns (address target) {\\n    assembly {\\n      target := create(0, add(_code, 0x20), mload(_code))\\n      switch iszero(extcodesize(target))\\n      case 1 {\\n        // throw if contract failed to deploy\\n        revert(0, 0)\\n      }\\n    }\\n    bytes32 hash = keccak256(_code);\\n    cache[hash] = target;\\n  }\\n}\\n\",\"versionPragma\":\">=0.5.0 <0.6.0\"}}}","address":"0x0c30352B6030E3CacFBcFc7F8bE65d4b6c128DF4","bytecode":"0x608060405234801561001057600080fd5b506040516102dc3803806102dc8339818101604052602081101561003357600080fd5b5051600180546001600160a01b0319166001600160a01b03909216919091179055610279806100636000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80638e1a55fc14610046578063c45527911461006a578063f3701da214610090575b600080fd5b61004e6100b6565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008057600080fd5b50356001600160a01b03166100c6565b61004e600480360360208110156100a657600080fd5b50356001600160a01b03166100e1565b60006100c1336100e1565b905090565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b03818116600090815260208190526040812054909116158061018d57506001600160a01b0380831660008181526020818152604091829020548251638da5cb5b60e01b8152925193941692638da5cb5b926004808201939291829003018186803b15801561015557600080fd5b505afa158015610169573d6000803e3d6000fd5b505050506040513d602081101561017f57600080fd5b50516001600160a01b031614155b61019657600080fd5b600154604080516379b80ed160e11b81526001600160a01b0385811660048301529151919092169163f3701da29160248083019260209291908290030181600087803b1580156101e557600080fd5b505af11580156101f9573d6000803e3d6000fd5b505050506040513d602081101561020f57600080fd5b50516001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255509056fea265627a7a723158207d3120fb7cad90e6278db04822d1b09077b5f959f897dbadcf140d72b24ef81664736f6c63430005110032","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100415760003560e01c80638e1a55fc14610046578063c45527911461006a578063f3701da214610090575b600080fd5b61004e6100b6565b604080516001600160a01b039092168252519081900360200190f35b61004e6004803603602081101561008057600080fd5b50356001600160a01b03166100c6565b61004e600480360360208110156100a657600080fd5b50356001600160a01b03166100e1565b60006100c1336100e1565b905090565b6000602081905290815260409020546001600160a01b031681565b6001600160a01b03818116600090815260208190526040812054909116158061018d57506001600160a01b0380831660008181526020818152604091829020548251638da5cb5b60e01b8152925193941692638da5cb5b926004808201939291829003018186803b15801561015557600080fd5b505afa158015610169573d6000803e3d6000fd5b505050506040513d602081101561017f57600080fd5b50516001600160a01b031614155b61019657600080fd5b600154604080516379b80ed160e11b81526001600160a01b0385811660048301529151919092169163f3701da29160248083019260209291908290030181600087803b1580156101e557600080fd5b505af11580156101f9573d6000803e3d6000fd5b505050506040513d602081101561020f57600080fd5b50516001600160a01b03928316600090815260208190526040902080546001600160a01b03191693821693909317909255509056fea265627a7a723158207d3120fb7cad90e6278db04822d1b09077b5f959f897dbadcf140d72b24ef81664736f6c63430005110032","abi":[{"inputs":[{"internalType":"address","name":"factory_","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"constant":false,"inputs":[],"name":"build","outputs":[{"internalType":"address payable","name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"build","outputs":[{"internalType":"address payable","name":"proxy","type":"address"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"proxies","outputs":[{"internalType":"contract DSProxy","name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"}]}