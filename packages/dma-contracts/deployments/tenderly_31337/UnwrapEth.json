{"metadata":"{\"defaultCompiler\":{\"version\":\"0.4.21\"},\"sources\":{\"contracts/actions/common/UnwrapEth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { Executable } from \\\"../common/Executable.sol\\\";\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { SafeERC20, IERC20 } from \\\"../../libs/SafeERC20.sol\\\";\\nimport { IWETH } from \\\"../../interfaces/tokens/IWETH.sol\\\";\\nimport { UnwrapEthData } from \\\"../../core/types/Common.sol\\\";\\nimport { UseStore, Read } from \\\"../../actions/common/UseStore.sol\\\";\\nimport { WETH } from \\\"../../core/constants/Common.sol\\\";\\nimport { OperationStorage } from \\\"../../core/OperationStorage.sol\\\";\\n\\n/**\\n * @title Unwrap ETH Action contract\\n * @notice Unwraps WETH balances to ETH\\n */\\ncontract UnwrapEth is Executable, UseStore {\\n  using SafeERC20 for IERC20;\\n  using Read for OperationStorage;\\n\\n  constructor(address _registry) UseStore(_registry) {}\\n\\n  /**\\n   * @dev look at UseStore.sol to get additional info on paramsMapping\\n   * @param data Encoded calldata that conforms to the UnwrapEthData struct\\n   * @param paramsMap Maps operation storage values by index (index offset by +1) to execute calldata params\\n   */\\n  function execute(bytes calldata data, uint8[] memory paramsMap) external payable override {\\n    IWETH weth = IWETH(registry.getRegisteredService(WETH));\\n\\n    UnwrapEthData memory unwrapData = parseInputs(data);\\n\\n    unwrapData.amount = store().readUint(bytes32(unwrapData.amount), paramsMap[0], address(this));\\n\\n    if (unwrapData.amount == type(uint256).max) {\\n      unwrapData.amount = weth.balanceOf(address(this));\\n    }\\n\\n    weth.withdraw(unwrapData.amount);\\n  }\\n\\n  function parseInputs(bytes memory _callData) public pure returns (UnwrapEthData memory params) {\\n    return abi.decode(_callData, (UnwrapEthData));\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/Executable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\n/**\\n * @title Shared Action Executable interface\\n * @notice Provides a dma-common interface for an execute method to all Action\\n */\\ninterface Executable {\\n  function execute(bytes calldata data, uint8[] memory paramsMap) external payable;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// ServiceRegistry.sol\\n\\n// Copyright (C) 2021-2021 Oazo Apps Limited\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity ^0.8.0;\\n\\ncontract ServiceRegistry {\\n  uint256 public constant MAX_DELAY = 30 days;\\n\\n  mapping(bytes32 => uint256) public lastExecuted;\\n  mapping(bytes32 => address) private namedService;\\n  mapping(bytes32 => bool) private invalidHashes;\\n  address public owner;\\n  uint256 public requiredDelay;\\n\\n  modifier validateInput(uint256 len) {\\n    require(msg.data.length == len, \\\"registry/illegal-padding\\\");\\n    _;\\n  }\\n\\n  modifier delayedExecution() {\\n    bytes32 operationHash = keccak256(msg.data);\\n    uint256 reqDelay = requiredDelay;\\n\\n    /* solhint-disable not-rely-on-time */\\n    if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\\n      // not called before, scheduled for execution\\n      lastExecuted[operationHash] = block.timestamp;\\n      emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\\n    } else {\\n      require(block.timestamp - reqDelay > lastExecuted[operationHash], \\\"registry/delay-too-small\\\");\\n      emit ChangeApplied(operationHash, block.timestamp, msg.data);\\n      _;\\n      lastExecuted[operationHash] = 0;\\n    }\\n    /* solhint-enable not-rely-on-time */\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"registry/only-owner\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initialDelay) {\\n    require(initialDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = initialDelay;\\n    owner = msg.sender;\\n  }\\n\\n  function transferOwnership(\\n    address newOwner\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    owner = newOwner;\\n  }\\n\\n  function changeRequiredDelay(\\n    uint256 newDelay\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    require(newDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = newDelay;\\n  }\\n\\n  function getServiceNameHash(string memory name) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function addNamedService(\\n    bytes32 serviceNameHash,\\n    address serviceAddress\\n  ) external onlyOwner validateInput(68) delayedExecution {\\n    require(invalidHashes[serviceNameHash] == false, \\\"registry/service-name-used-before\\\");\\n    require(namedService[serviceNameHash] == address(0), \\\"registry/service-override\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n    emit NamedServiceAdded(serviceNameHash, serviceAddress);\\n  }\\n\\n  function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = address(0);\\n    invalidHashes[serviceNameHash] = true;\\n    emit NamedServiceRemoved(serviceNameHash);\\n  }\\n\\n  function getRegisteredService(string memory serviceName) external view returns (address) {\\n    return namedService[keccak256(abi.encodePacked(serviceName))];\\n  }\\n\\n  function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\\n    return namedService[serviceNameHash];\\n  }\\n\\n  function clearScheduledExecution(\\n    bytes32 scheduledExecution\\n  ) external onlyOwner validateInput(36) {\\n    require(lastExecuted[scheduledExecution] > 0, \\\"registry/execution-not-scheduled\\\");\\n    lastExecuted[scheduledExecution] = 0;\\n    emit ChangeCancelled(scheduledExecution);\\n  }\\n\\n  event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\\n  event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\\n  event ChangeCancelled(bytes32 dataHash);\\n  event NamedServiceRemoved(bytes32 nameHash);\\n  event NamedServiceAdded(bytes32 nameHash, address service);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/tokens/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IWETH {\\n  function allowance(address, address) external returns (uint256);\\n\\n  function balanceOf(address) external returns (uint256);\\n\\n  function approve(address, uint256) external;\\n\\n  function transfer(address, uint256) external returns (bool);\\n\\n  function transferFrom(address, address, uint256) external returns (bool);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint256) external;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nenum FlashloanProvider {\\n  DssFlash,\\n  Balancer\\n}\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  address asset;\\n  bool isProxyFlashloan;\\n  bool isDPMProxy;\\n  FlashloanProvider provider;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/OperationStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"./ServiceRegistry.sol\\\";\\n\\n/**\\n * @title Operation Storage\\n * @notice Stores the return values from Actions during an Operation's execution\\n * @dev valuesHolders is an array of t/x initiators (msg.sender) who have pushed values to Operation Storage\\n * returnValues is a mapping between a msg.sender and an array of Action return values generated by that senders transaction\\n */\\ncontract OperationStorage {\\n  uint8 internal action = 0;\\n  bytes32[] public actions;\\n  bool[] public optionals;\\n  mapping(address => bytes32[]) public returnValues;\\n  address[] public valuesHolders;\\n  bool private locked;\\n  address private whoLocked;\\n  address public initiator;\\n  address immutable operationExecutorAddress;\\n\\n  ServiceRegistry internal immutable registry;\\n\\n  constructor(ServiceRegistry _registry, address _operationExecutorAddress) {\\n    registry = _registry;\\n    operationExecutorAddress = _operationExecutorAddress;\\n  }\\n\\n  /**\\n   * @dev Locks storage to protect against re-entrancy attacks.@author\\n   */\\n  function lock() external {\\n    locked = true;\\n    whoLocked = msg.sender;\\n  }\\n\\n  /**\\n   * @dev Only the original locker can unlock the contract at the end of the transaction\\n   */\\n  function unlock() external {\\n    require(whoLocked == msg.sender, \\\"Only the locker can unlock\\\");\\n    require(locked, \\\"Not locked\\\");\\n    locked = false;\\n    whoLocked = address(0);\\n  }\\n\\n  /**\\n   * @dev Sets the initiator of the original call\\n   * Is used by Automation Bot branch in the onFlashloan callback in Operation Executor\\n   * Ensures that third party calls to Operation Storage do not maliciously override values in Operation Storage\\n   * @param _initiator Sets the initiator to Operation Executor contract when storing return values from flashloan nested Action\\n   */\\n  function setInitiator(address _initiator) external {\\n    require(msg.sender == operationExecutorAddress);\\n    initiator = _initiator;\\n  }\\n\\n  /**\\n   * @param _actions Stores the Actions currently being executed for a given Operation and their optionality\\n   */\\n  function setOperationActions(bytes32[] memory _actions, bool[] memory _optionals) external {\\n    actions = _actions;\\n    optionals = _optionals;\\n  }\\n\\n  /**\\n   * @param actionHash Checks the current action has against the expected action hash\\n   */\\n  function verifyAction(bytes32 actionHash, bool skipped) external {\\n    if (skipped) {\\n      require(optionals[action], \\\"Action cannot be skipped\\\");\\n    }\\n    require(actions[action] == actionHash, \\\"incorrect-action\\\");\\n    registry.getServiceAddress(actionHash);\\n    action++;\\n  }\\n\\n  /**\\n   * @dev Custom operations have no Actions stored in Operation Registry\\n   * @return Returns true / false depending on whether the Operation has any actions to verify the Operation against\\n   */\\n  function hasActionsToVerify() external view returns (bool) {\\n    return actions.length > 0;\\n  }\\n\\n  /**\\n   * @param value Pushes a bytes32 to end of the returnValues array\\n   */\\n  function push(bytes32 value) external {\\n    address who = msg.sender;\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n\\n    if (returnValues[who].length == 0) {\\n      valuesHolders.push(who);\\n    }\\n    returnValues[who].push(value);\\n  }\\n\\n  /**\\n   * @dev Values are stored against an address (who)\\n   * This ensures that malicious actors looking to push values to Operation Storage mid transaction cannot overwrite values\\n   * @param index The index of the desired value\\n   * @param who The msg.sender address responsible for storing values\\n   */\\n  function at(uint256 index, address who) external view returns (bytes32) {\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n    return returnValues[who][index];\\n  }\\n\\n  /**\\n   * @param who The msg.sender address responsible for storing values\\n   * @return The length of return values stored against a given msg.sender address\\n   */\\n  function len(address who) external view returns (uint256) {\\n    if (who == operationExecutorAddress) {\\n      who = initiator;\\n    }\\n    return returnValues[who].length;\\n  }\\n\\n  /**\\n   * @dev Clears storage in preparation for the next Operation\\n   */\\n  function clearStorage() external {\\n    delete action;\\n    delete actions;\\n    for (uint256 i = 0; i < valuesHolders.length; i++) {\\n      delete returnValues[valuesHolders[i]];\\n    }\\n    delete valuesHolders;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant CHAINLOG_VIEWER = \\\"ChainLogView\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator\\\";\\nstring constant DS_GUARD_FACTORY = \\\"DSGuardFactory\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10 ** 27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action dma-contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/actions/common/UseStore.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { OperationStorage } from \\\"../../core/OperationStorage.sol\\\";\\nimport { ServiceRegistry } from \\\"../../core/ServiceRegistry.sol\\\";\\nimport { OPERATION_STORAGE } from \\\"../../core/constants/Common.sol\\\";\\n\\n/**\\n * @title UseStore contract\\n * @notice Provides access to the OperationStorage contract\\n * @dev Is used by Action dma-contracts to store and retrieve values from Operation Storage.\\n * @dev Previously stored values are used to override values passed to Actions during Operation execution\\n */\\nabstract contract UseStore {\\n  ServiceRegistry internal immutable registry;\\n\\n  constructor(address _registry) {\\n    registry = ServiceRegistry(_registry);\\n  }\\n\\n  function store() internal view returns (OperationStorage) {\\n    return OperationStorage(registry.getRegisteredService(OPERATION_STORAGE));\\n  }\\n}\\n\\nlibrary Read {\\n  function read(\\n    OperationStorage _storage,\\n    bytes32 param,\\n    uint256 paramMapping,\\n    address who\\n  ) internal view returns (bytes32) {\\n    if (paramMapping > 0) {\\n      return _storage.at(paramMapping - 1, who);\\n    }\\n\\n    return param;\\n  }\\n\\n  function readUint(\\n    OperationStorage _storage,\\n    bytes32 param,\\n    uint256 paramMapping,\\n    address who\\n  ) internal view returns (uint256) {\\n    return uint256(read(_storage, param, paramMapping, who));\\n  }\\n}\\n\\nlibrary Write {\\n  function write(OperationStorage _storage, bytes32 value) internal {\\n    _storage.push(value);\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0x84f2DF81A58BdDdA98322CADa91eC493454591f3","bytecode":"0x60a060405234801561001057600080fd5b506040516107dd3803806107dd83398101604081905261002f91610040565b6001600160a01b0316608052610070565b60006020828403121561005257600080fd5b81516001600160a01b038116811461006957600080fd5b9392505050565b60805161074c6100916000396000818160aa01526102e9015261074c6000f3fe6080604052600436106100295760003560e01c806385e92d981461002e5780639093410d14610043575b600080fd5b61004161003c366004610462565b610076565b005b34801561004f57600080fd5b5061006361005e366004610573565b61027f565b6040519051815260200160405180910390f35b6040805180820182526004808252630ae8aa8960e31b60208301529151630851f3bd60e01b81526000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692630851f3bd926100db9201610607565b602060405180830381865afa1580156100f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011c9190610655565b9050600061015f85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061027f92505050565b90506101a4816000015160001b8460008151811061017f5761017f610685565b602002602001015160ff16306101936102a8565b6001600160a01b0316929190610362565b80825260010161021b576040516370a0823160e01b81523060048201526001600160a01b038316906370a08231906024016020604051808303816000875af11580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610218919061069b565b81525b8051604051632e1a7d4d60e01b815260048101919091526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b505050505050505050565b604080516020810190915260008152818060200190518101906102a291906106b4565b92915050565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd9161031c91600401610607565b602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610655565b905090565b60006103708585858561037b565b90505b949350505050565b60008215610413576001600160a01b03851663a729351b61039d6001866106f5565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c919061069b565b9050610373565b50919392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561045a5761045a61041c565b604052919050565b60008060006040848603121561047757600080fd5b83356001600160401b038082111561048e57600080fd5b818601915086601f8301126104a257600080fd5b8135818111156104b157600080fd5b602088818386010111156104c457600080fd5b8084019650819550808801359350828411156104df57600080fd5b838801935088601f8501126104f357600080fd5b83359150828211156105075761050761041c565b8160051b9250610518818401610432565b828152928401810192818101908a85111561053257600080fd5b948201945b84861015610563578535935060ff841684146105535760008081fd5b8382529482019490820190610537565b8096505050505050509250925092565b6000602080838503121561058657600080fd5b82356001600160401b038082111561059d57600080fd5b818501915085601f8301126105b157600080fd5b8135818111156105c3576105c361041c565b6105d5601f8201601f19168501610432565b915080825286848285010111156105eb57600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b8181101561063457858101830151858201604001528201610618565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561066757600080fd5b81516001600160a01b038116811461067e57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106ad57600080fd5b5051919050565b6000602082840312156106c657600080fd5b604051602081016001600160401b03811182821017156106e8576106e861041c565b6040529151825250919050565b818103818111156102a257634e487b7160e01b600052601160045260246000fdfea26469706673582212202bfbd29546e3a44e4e31850d686b768620b89b9099c3dc94dfe0cc2039df32f464736f6c63430008120033","deployedBytecode":"0x6080604052600436106100295760003560e01c806385e92d981461002e5780639093410d14610043575b600080fd5b61004161003c366004610462565b610076565b005b34801561004f57600080fd5b5061006361005e366004610573565b61027f565b6040519051815260200160405180910390f35b6040805180820182526004808252630ae8aa8960e31b60208301529151630851f3bd60e01b81526000926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692630851f3bd926100db9201610607565b602060405180830381865afa1580156100f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011c9190610655565b9050600061015f85858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061027f92505050565b90506101a4816000015160001b8460008151811061017f5761017f610685565b602002602001015160ff16306101936102a8565b6001600160a01b0316929190610362565b80825260010161021b576040516370a0823160e01b81523060048201526001600160a01b038316906370a08231906024016020604051808303816000875af11580156101f4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610218919061069b565b81525b8051604051632e1a7d4d60e01b815260048101919091526001600160a01b03831690632e1a7d4d90602401600060405180830381600087803b15801561026057600080fd5b505af1158015610274573d6000803e3d6000fd5b505050505050505050565b604080516020810190915260008152818060200190518101906102a291906106b4565b92915050565b604080518082018252601281527127b832b930ba34b7b729ba37b930b3b2af9960711b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd9161031c91600401610607565b602060405180830381865afa158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610655565b905090565b60006103708585858561037b565b90505b949350505050565b60008215610413576001600160a01b03851663a729351b61039d6001866106f5565b6040516001600160e01b031960e084901b16815260048101919091526001600160a01b0385166024820152604401602060405180830381865afa1580156103e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040c919061069b565b9050610373565b50919392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561045a5761045a61041c565b604052919050565b60008060006040848603121561047757600080fd5b83356001600160401b038082111561048e57600080fd5b818601915086601f8301126104a257600080fd5b8135818111156104b157600080fd5b602088818386010111156104c457600080fd5b8084019650819550808801359350828411156104df57600080fd5b838801935088601f8501126104f357600080fd5b83359150828211156105075761050761041c565b8160051b9250610518818401610432565b828152928401810192818101908a85111561053257600080fd5b948201945b84861015610563578535935060ff841684146105535760008081fd5b8382529482019490820190610537565b8096505050505050509250925092565b6000602080838503121561058657600080fd5b82356001600160401b038082111561059d57600080fd5b818501915085601f8301126105b157600080fd5b8135818111156105c3576105c361041c565b6105d5601f8201601f19168501610432565b915080825286848285010111156105eb57600080fd5b8084840185840137600090820190930192909252509392505050565b600060208083528351808285015260005b8181101561063457858101830151858201604001528201610618565b506000604082860101526040601f19601f8301168501019250505092915050565b60006020828403121561066757600080fd5b81516001600160a01b038116811461067e57600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156106ad57600080fd5b5051919050565b6000602082840312156106c657600080fd5b604051602081016001600160401b03811182821017156106e8576106e861041c565b6040529151825250919050565b818103818111156102a257634e487b7160e01b600052601160045260246000fdfea26469706673582212202bfbd29546e3a44e4e31850d686b768620b89b9099c3dc94dfe0cc2039df32f464736f6c63430008120033","abi":[{"inputs":[{"internalType":"address","name":"_registry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"bytes","name":"data","type":"bytes"},{"internalType":"uint8[]","name":"paramsMap","type":"uint8[]"}],"name":"execute","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_callData","type":"bytes"}],"name":"parseInputs","outputs":[{"components":[{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct UnwrapEthData","name":"params","type":"tuple"}],"stateMutability":"pure","type":"function"}]}