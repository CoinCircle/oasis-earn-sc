{"metadata":"{\"defaultCompiler\":{\"version\":\"0.4.21\"},\"sources\":{\"contracts/swap/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nimport { ServiceRegistry } from \\\"../core/ServiceRegistry.sol\\\";\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { SafeMath } from \\\"../libs/SafeMath.sol\\\";\\nimport { SafeERC20 } from \\\"../libs/SafeERC20.sol\\\";\\nimport { ONE_INCH_AGGREGATOR } from \\\"../core/constants/Common.sol\\\";\\nimport { SwapData } from \\\"../core/types/Common.sol\\\";\\n\\ncontract Swap {\\n  using SafeMath for uint256;\\n  using SafeERC20 for IERC20;\\n\\n  address public feeBeneficiaryAddress;\\n  uint256 public constant feeBase = 10000;\\n  mapping(uint256 => bool) public feeTiers;\\n  mapping(address => bool) public authorizedAddresses;\\n  ServiceRegistry internal immutable registry;\\n\\n  error ReceivedLess(uint256 receiveAtLeast, uint256 received);\\n  error Unauthorized();\\n  error FeeTierDoesNotExist(uint256 fee);\\n  error FeeTierAlreadyExists(uint256 fee);\\n  error SwapFailed();\\n\\n  constructor(\\n    address authorisedCaller,\\n    address feeBeneficiary,\\n    uint256 _initialFee,\\n    address _registry\\n  ) {\\n    authorizedAddresses[authorisedCaller] = true;\\n    authorizedAddresses[feeBeneficiary] = true;\\n    _addFeeTier(_initialFee);\\n    feeBeneficiaryAddress = feeBeneficiary;\\n    registry = ServiceRegistry(_registry);\\n  }\\n\\n  event AssetSwap(\\n    address indexed assetIn,\\n    address indexed assetOut,\\n    uint256 amountIn,\\n    uint256 amountOut\\n  );\\n\\n  event FeePaid(address indexed beneficiary, uint256 amount, address token);\\n  event SlippageSaved(uint256 minimumPossible, uint256 actualAmount);\\n  event FeeTierAdded(uint256 fee);\\n  event FeeTierRemoved(uint256 fee);\\n\\n  modifier onlyAuthorised() {\\n    if (!authorizedAddresses[msg.sender]) {\\n      revert Unauthorized();\\n    }\\n    _;\\n  }\\n\\n  function _addFeeTier(uint256 fee) private {\\n    if (feeTiers[fee]) {\\n      revert FeeTierAlreadyExists(fee);\\n    }\\n    feeTiers[fee] = true;\\n    emit FeeTierAdded(fee);\\n  }\\n\\n  function addFeeTier(uint256 fee) public onlyAuthorised {\\n    _addFeeTier(fee);\\n  }\\n\\n  function removeFeeTier(uint256 fee) public onlyAuthorised {\\n    if (!feeTiers[fee]) {\\n      revert FeeTierDoesNotExist(fee);\\n    }\\n    feeTiers[fee] = false;\\n    emit FeeTierRemoved(fee);\\n  }\\n\\n  function verifyFee(uint256 feeId) public view returns (bool valid) {\\n    valid = feeTiers[feeId];\\n  }\\n\\n  function _swap(\\n    address fromAsset,\\n    address toAsset,\\n    uint256 amount,\\n    uint256 receiveAtLeast,\\n    address callee,\\n    bytes calldata withData\\n  ) internal returns (uint256 balance) {\\n    IERC20(fromAsset).safeApprove(callee, amount);\\n\\n    (bool success, ) = callee.call(withData);\\n\\n    if (!success) {\\n      revert SwapFailed();\\n    }\\n\\n    balance = IERC20(toAsset).balanceOf(address(this));\\n\\n    emit SlippageSaved(receiveAtLeast, balance);\\n\\n    if (balance < receiveAtLeast) {\\n      revert ReceivedLess(receiveAtLeast, balance);\\n    }\\n    emit SlippageSaved(receiveAtLeast, balance);\\n    emit AssetSwap(fromAsset, toAsset, amount, balance);\\n  }\\n\\n  function _collectFee(\\n    address asset,\\n    uint256 fromAmount,\\n    uint256 fee\\n  ) internal returns (uint256 amount) {\\n    bool isFeeValid = verifyFee(fee);\\n    if (!isFeeValid) {\\n      revert FeeTierDoesNotExist(fee);\\n    }\\n\\n    uint256 feeToTransfer = fromAmount.mul(fee).div(fee.add(feeBase));\\n\\n    if (fee > 0) {\\n      IERC20(asset).safeTransfer(feeBeneficiaryAddress, feeToTransfer);\\n      emit FeePaid(feeBeneficiaryAddress, feeToTransfer, asset);\\n    }\\n\\n    amount = fromAmount.sub(feeToTransfer);\\n  }\\n\\n  function swapTokens(SwapData calldata swapData) public returns (uint256) {\\n    IERC20(swapData.fromAsset).safeTransferFrom(msg.sender, address(this), swapData.amount);\\n\\n    uint256 amountFrom = swapData.amount;\\n\\n    if (swapData.collectFeeInFromToken) {\\n      amountFrom = _collectFee(swapData.fromAsset, swapData.amount, swapData.fee);\\n    }\\n\\n    address oneInch = registry.getRegisteredService(ONE_INCH_AGGREGATOR);\\n\\n    uint256 toTokenBalance = _swap(\\n      swapData.fromAsset,\\n      swapData.toAsset,\\n      amountFrom,\\n      swapData.receiveAtLeast,\\n      oneInch,\\n      swapData.withData\\n    );\\n\\n    if (!swapData.collectFeeInFromToken) {\\n      toTokenBalance = _collectFee(swapData.toAsset, toTokenBalance, swapData.fee);\\n    }\\n\\n    uint256 fromTokenBalance = IERC20(swapData.fromAsset).balanceOf(address(this));\\n    if (fromTokenBalance > 0) {\\n      IERC20(swapData.fromAsset).safeTransfer(msg.sender, fromTokenBalance);\\n    }\\n\\n    IERC20(swapData.toAsset).safeTransfer(msg.sender, toTokenBalance);\\n    return toTokenBalance;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/ServiceRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\n/// ServiceRegistry.sol\\n\\n// Copyright (C) 2021-2021 Oazo Apps Limited\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\npragma solidity ^0.8.0;\\n\\ncontract ServiceRegistry {\\n  uint256 public constant MAX_DELAY = 30 days;\\n\\n  mapping(bytes32 => uint256) public lastExecuted;\\n  mapping(bytes32 => address) private namedService;\\n  mapping(bytes32 => bool) private invalidHashes;\\n  address public owner;\\n  uint256 public requiredDelay;\\n\\n  modifier validateInput(uint256 len) {\\n    require(msg.data.length == len, \\\"registry/illegal-padding\\\");\\n    _;\\n  }\\n\\n  modifier delayedExecution() {\\n    bytes32 operationHash = keccak256(msg.data);\\n    uint256 reqDelay = requiredDelay;\\n\\n    /* solhint-disable not-rely-on-time */\\n    if (lastExecuted[operationHash] == 0 && reqDelay > 0) {\\n      // not called before, scheduled for execution\\n      lastExecuted[operationHash] = block.timestamp;\\n      emit ChangeScheduled(operationHash, block.timestamp + reqDelay, msg.data);\\n    } else {\\n      require(block.timestamp - reqDelay > lastExecuted[operationHash], \\\"registry/delay-too-small\\\");\\n      emit ChangeApplied(operationHash, block.timestamp, msg.data);\\n      _;\\n      lastExecuted[operationHash] = 0;\\n    }\\n    /* solhint-enable not-rely-on-time */\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == owner, \\\"registry/only-owner\\\");\\n    _;\\n  }\\n\\n  constructor(uint256 initialDelay) {\\n    require(initialDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = initialDelay;\\n    owner = msg.sender;\\n  }\\n\\n  function transferOwnership(\\n    address newOwner\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    owner = newOwner;\\n  }\\n\\n  function changeRequiredDelay(\\n    uint256 newDelay\\n  ) external onlyOwner validateInput(36) delayedExecution {\\n    require(newDelay <= MAX_DELAY, \\\"registry/invalid-delay\\\");\\n    requiredDelay = newDelay;\\n  }\\n\\n  function getServiceNameHash(string memory name) external pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(name));\\n  }\\n\\n  function addNamedService(\\n    bytes32 serviceNameHash,\\n    address serviceAddress\\n  ) external onlyOwner validateInput(68) delayedExecution {\\n    require(invalidHashes[serviceNameHash] == false, \\\"registry/service-name-used-before\\\");\\n    require(namedService[serviceNameHash] == address(0), \\\"registry/service-override\\\");\\n    namedService[serviceNameHash] = serviceAddress;\\n    emit NamedServiceAdded(serviceNameHash, serviceAddress);\\n  }\\n\\n  function removeNamedService(bytes32 serviceNameHash) external onlyOwner validateInput(36) {\\n    require(namedService[serviceNameHash] != address(0), \\\"registry/service-does-not-exist\\\");\\n    namedService[serviceNameHash] = address(0);\\n    invalidHashes[serviceNameHash] = true;\\n    emit NamedServiceRemoved(serviceNameHash);\\n  }\\n\\n  function getRegisteredService(string memory serviceName) external view returns (address) {\\n    return namedService[keccak256(abi.encodePacked(serviceName))];\\n  }\\n\\n  function getServiceAddress(bytes32 serviceNameHash) external view returns (address) {\\n    return namedService[serviceNameHash];\\n  }\\n\\n  function clearScheduledExecution(\\n    bytes32 scheduledExecution\\n  ) external onlyOwner validateInput(36) {\\n    require(lastExecuted[scheduledExecution] > 0, \\\"registry/execution-not-scheduled\\\");\\n    lastExecuted[scheduledExecution] = 0;\\n    emit ChangeCancelled(scheduledExecution);\\n  }\\n\\n  event ChangeScheduled(bytes32 dataHash, uint256 scheduledFor, bytes data);\\n  event ChangeApplied(bytes32 dataHash, uint256 appliedAt, bytes data);\\n  event ChangeCancelled(bytes32 dataHash);\\n  event NamedServiceRemoved(bytes32 nameHash);\\n  event NamedServiceAdded(bytes32 nameHash, address service);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/libs/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\nlibrary SafeMath {\\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 c = a + b;\\n    require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n  }\\n\\n  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b <= a, errorMessage);\\n    uint256 c = a - b;\\n\\n    return c;\\n  }\\n\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n    // benefit is lost if 'b' is also tested.\\n    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    uint256 c = a * b;\\n    require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n    return c;\\n  }\\n\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return div(a, b, \\\"SafeMath: division by zero\\\");\\n  }\\n\\n  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b > 0, errorMessage);\\n    uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n  }\\n\\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n  }\\n\\n  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n    require(b != 0, errorMessage);\\n    return a % b;\\n  }\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nlibrary Address {\\n  function isContract(address account) internal view returns (bool) {\\n    // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\\n    // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\\n    // for accounts without code, i.e. `keccak256('')`\\n    bytes32 codehash;\\n    bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      codehash := extcodehash(account)\\n    }\\n    return (codehash != accountHash && codehash != 0x0);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n    (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  function functionCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value\\n  ) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    return _functionCallWithValue(target, data, value, errorMessage);\\n  }\\n\\n  function _functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 weiValue,\\n    string memory errorMessage\\n  ) private returns (bytes memory) {\\n    require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    if (success) {\\n      return returndata;\\n    }\\n\\n    if (returndata.length > 0) {\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    }\\n\\n    revert(errorMessage);\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/interfaces/tokens/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.15;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256 supply);\\n\\n  function balanceOf(address _owner) external view returns (uint256 balance);\\n\\n  function transfer(address _to, uint256 _value) external returns (bool success);\\n\\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n\\n  function approve(address _spender, uint256 _value) external returns (bool success);\\n\\n  function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n  function decimals() external view returns (uint256 digits);\\n}\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/libs/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.1;\\n\\nimport { IERC20 } from \\\"../interfaces/tokens/IERC20.sol\\\";\\nimport { Address } from \\\"./Address.sol\\\";\\nimport { SafeMath } from \\\"./SafeMath.sol\\\";\\n\\nlibrary SafeERC20 {\\n  using SafeMath for uint256;\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n    );\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {ERC20-approve}, and its usage is discouraged.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender).sub(\\n      value,\\n      \\\"SafeERC20: decreased allowance below zero\\\"\\n    );\\n    _callOptionalReturn(\\n      token,\\n      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\\n    );\\n  }\\n\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      // solhint-disable-next-line max-line-length\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\",\"versionPragma\":\">=0.8.1\"},\"contracts/core/constants/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nstring constant OPERATION_STORAGE = \\\"OperationStorage_2\\\";\\nstring constant OPERATION_EXECUTOR = \\\"OperationExecutor_2\\\";\\nstring constant OPERATIONS_REGISTRY = \\\"OperationsRegistry_2\\\";\\nstring constant CHAINLOG_VIEWER = \\\"ChainLogView\\\";\\nstring constant ONE_INCH_AGGREGATOR = \\\"OneInchAggregator\\\";\\nstring constant DS_GUARD_FACTORY = \\\"DSGuardFactory\\\";\\nstring constant WETH = \\\"WETH\\\";\\nstring constant DAI = \\\"DAI\\\";\\nuint256 constant RAY = 10 ** 27;\\nbytes32 constant NULL = \\\"\\\";\\n\\n/**\\n * @dev We do not include patch versions in contract names to allow\\n * for hotfixes of Action dma-contracts\\n * and to limit updates to TheGraph\\n * if the types encoded in emitted events change then use a minor version and\\n * update the ServiceRegistry with a new entry\\n * and update TheGraph decoding accordingly\\n */\\nstring constant POSITION_CREATED_ACTION = \\\"PositionCreated\\\";\\n\\nstring constant UNISWAP_ROUTER = \\\"UniswapRouter\\\";\\nstring constant SWAP = \\\"Swap\\\";\\n\\naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"versionPragma\":\"^0.8.15\"},\"contracts/core/types/Common.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity ^0.8.15;\\n\\nenum FlashloanProvider {\\n  DssFlash,\\n  Balancer\\n}\\n\\nstruct FlashloanData {\\n  uint256 amount;\\n  address asset;\\n  bool isProxyFlashloan;\\n  bool isDPMProxy;\\n  FlashloanProvider provider;\\n  Call[] calls;\\n}\\n\\nstruct PullTokenData {\\n  address asset;\\n  address from;\\n  uint256 amount;\\n}\\n\\nstruct SendTokenData {\\n  address asset;\\n  address to;\\n  uint256 amount;\\n}\\n\\nstruct SetApprovalData {\\n  address asset;\\n  address delegate;\\n  uint256 amount;\\n  bool sumAmounts;\\n}\\n\\nstruct SwapData {\\n  address fromAsset;\\n  address toAsset;\\n  uint256 amount;\\n  uint256 receiveAtLeast;\\n  uint256 fee;\\n  bytes withData;\\n  bool collectFeeInFromToken;\\n}\\n\\nstruct Call {\\n  bytes32 targetHash;\\n  bytes callData;\\n  bool skipped;\\n}\\n\\nstruct Operation {\\n  uint8 currentAction;\\n  bytes32[] actions;\\n}\\n\\nstruct WrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct UnwrapEthData {\\n  uint256 amount;\\n}\\n\\nstruct ReturnFundsData {\\n  address asset;\\n}\\n\\nstruct PositionCreatedData {\\n  string protocol;\\n  string positionType;\\n  address collateralToken;\\n  address debtToken;\\n}\\n\",\"versionPragma\":\"^0.8.15\"}}}","address":"0x33d516D030976c5348DA6aBFEa65BFE37764d7F6","bytecode":"0x60a060405234801561001057600080fd5b50604051620011223803806200112283398101604081905261003191610140565b6001600160a01b038481166000908152600260205260408082208054600160ff1991821681179092559387168352912080549092161790556100728261009c565b600080546001600160a01b0319166001600160a01b039485161790559091166080525061018d9050565b60008181526001602052604090205460ff16156100d357604051634552f1cf60e01b81526004810182905260240160405180910390fd5b600081815260016020818152604092839020805460ff191690921790915590518281527fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a750933910160405180910390a150565b80516001600160a01b038116811461013b57600080fd5b919050565b6000806000806080858703121561015657600080fd5b61015f85610124565b935061016d60208601610124565b92506040850151915061018260608601610124565b905092959194509250565b608051610f79620001a960003960006102180152610f796000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c8063230ed44a1461007d5780632b5e4aab146100b55780632c835492146100c857806342b53e5f146100e95780635207ce82146100fe57806395e911a81461011e578063a001c36714610127578063f19e207e1461013a575b600080fd5b6100a061008b366004610ca0565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100a06100c3366004610ca0565b61015d565b6100db6100d6366004610cb9565b610172565b6040519081526020016100ac565b6100fc6100f7366004610ca0565b6103c3565b005b600054610111906001600160a01b031681565b6040516100ac9190610cf3565b6100db61271081565b6100fc610135366004610ca0565b61047c565b6100a0610148366004610d1c565b60026020526000908152604090205460ff1681565b60009081526001602052604090205460ff1690565b600061019c3330604085013561018b6020870187610d1c565b6001600160a01b03169291906104b7565b60408201356101b160e0840160c08501610d47565b156101d8576101d56101c66020850185610d1c565b84604001358560800135610528565b90505b604080518082018252601181527027b732a4b731b420b3b3b932b3b0ba37b960791b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd9161024b91600401610d88565b602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c9190610dbb565b905060006102c96102a06020870187610d1c565b6102b06040880160208901610d1c565b856060890135866102c460a08c018c610dd8565b6105f8565b90506102db60e0860160c08701610d47565b610300576102fd6102f26040870160208801610d1c565b828760800135610528565b90505b600061030f6020870187610d1c565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161033a9190610cf3565b602060405180830381865afa158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b9190610e25565b905080156103a5576103a5338261039560208a018a610d1c565b6001600160a01b031691906107c9565b6103ba338361039560408a0160208b01610d1c565b50949350505050565b3360009081526002602052604090205460ff166103f2576040516282b42960e81b815260040160405180910390fd5b60008181526001602052604090205460ff166104295760405163095f4a5160e01b8152600481018290526024015b60405180910390fd5b60008181526001602052604090819020805460ff19169055517f2b4584016031d9a0d1fc722a5f384f606370058bfcc1354c24264dbd139d67da906104719083815260200190565b60405180910390a150565b3360009081526002602052604090205460ff166104ab576040516282b42960e81b815260040160405180910390fd5b6104b4816107ed565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526105229085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261086b565b50505050565b6000806105348361015d565b9050806105575760405163095f4a5160e01b815260048101849052602401610420565b60006105786105688561271061093d565b61057287876109a3565b90610a25565b905083156105e45760005461059a906001600160a01b038881169116836107c9565b600054604080518381526001600160a01b038981166020830152909216917f4756ac0011cd274810feab06c84b22207f6cf4374017214d7edbb4793e01b1dc910160405180910390a25b6105ee8582610a64565b9695505050505050565b600061060e6001600160a01b0389168588610aa6565b6000846001600160a01b0316848460405161062a929190610e3e565b6000604051808303816000865af19150503d8060008114610667576040519150601f19603f3d011682016040523d82523d6000602084013e61066c565b606091505b505090508061068e5760405163081ceff360e41b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b038916906370a08231906106ba903090600401610cf3565b602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190610e25565b9150600080516020610f24833981519152868360405161071c929190610e4e565b60405180910390a1858210156107495785826040516324186c3f60e21b8152600401610420929190610e4e565b600080516020610f248339815191528683604051610768929190610e4e565b60405180910390a1876001600160a01b0316896001600160a01b03167f945805326745354040d87a85082ddbf37400ed05d6ffe9ae1452b4c5cfe2988389856040516107b5929190610e4e565b60405180910390a350979650505050505050565b6107e88363a9059cbb60e01b84846040516024016104eb929190610e5c565b505050565b60008181526001602052604090205460ff161561082057604051634552f1cf60e01b815260048101829052602401610420565b600081815260016020818152604092839020805460ff191690921790915590518281527fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a7509339101610471565b60006108c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610af59092919063ffffffff16565b8051909150156107e857808060200190518101906108de9190610e75565b6107e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610420565b60008061094a8385610ea8565b90508381101561099a5760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b6044820152606401610420565b90505b92915050565b6000826000036109b55750600061099d565b60006109c18385610ebb565b9050826109ce8583610ed2565b1461099a5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610420565b600061099a83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250610b0c565b600061099a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b43565b6040516001600160a01b038316602482015260006044820152610ad690849063095ea7b360e01b906064016104eb565b6107e88363095ea7b360e01b84846040516024016104eb929190610e5c565b6060610b048484600085610b74565b949350505050565b60008183610b2d5760405162461bcd60e51b81526004016104209190610d88565b506000610b3a8486610ed2565b95945050505050565b60008184841115610b675760405162461bcd60e51b81526004016104209190610d88565b506000610b3a8486610ef4565b6060610b7f85610c67565b610bcb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610420565b600080866001600160a01b03168587604051610be79190610f07565b60006040518083038185875af1925050503d8060008114610c24576040519150601f19603f3d011682016040523d82523d6000602084013e610c29565b606091505b50915091508115610c3d579150610b049050565b805115610c4d5780518082602001fd5b8360405162461bcd60e51b81526004016104209190610d88565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610b04575050151592915050565b600060208284031215610cb257600080fd5b5035919050565b600060208284031215610ccb57600080fd5b81356001600160401b03811115610ce157600080fd5b820160e0818503121561099a57600080fd5b6001600160a01b0391909116815260200190565b6001600160a01b03811681146104b457600080fd5b600060208284031215610d2e57600080fd5b813561099a81610d07565b80151581146104b457600080fd5b600060208284031215610d5957600080fd5b813561099a81610d39565b60005b83811015610d7f578181015183820152602001610d67565b50506000910152565b6020815260008251806020840152610da7816040850160208701610d64565b601f01601f19169190910160400192915050565b600060208284031215610dcd57600080fd5b815161099a81610d07565b6000808335601e19843603018112610def57600080fd5b8301803591506001600160401b03821115610e0957600080fd5b602001915036819003821315610e1e57600080fd5b9250929050565b600060208284031215610e3757600080fd5b5051919050565b8183823760009101908152919050565b918252602082015260400190565b6001600160a01b03929092168252602082015260400190565b600060208284031215610e8757600080fd5b815161099a81610d39565b634e487b7160e01b600052601160045260246000fd5b8082018082111561099d5761099d610e92565b808202811582820484141761099d5761099d610e92565b600082610eef57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561099d5761099d610e92565b60008251610f19818460208701610d64565b919091019291505056fecfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255ba26469706673582212206248dd7804df7e252dd50b89a58ca80370a12b4d96582f1bcdd100141596f3ef64736f6c63430008120033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100785760003560e01c8063230ed44a1461007d5780632b5e4aab146100b55780632c835492146100c857806342b53e5f146100e95780635207ce82146100fe57806395e911a81461011e578063a001c36714610127578063f19e207e1461013a575b600080fd5b6100a061008b366004610ca0565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100a06100c3366004610ca0565b61015d565b6100db6100d6366004610cb9565b610172565b6040519081526020016100ac565b6100fc6100f7366004610ca0565b6103c3565b005b600054610111906001600160a01b031681565b6040516100ac9190610cf3565b6100db61271081565b6100fc610135366004610ca0565b61047c565b6100a0610148366004610d1c565b60026020526000908152604090205460ff1681565b60009081526001602052604090205460ff1690565b600061019c3330604085013561018b6020870187610d1c565b6001600160a01b03169291906104b7565b60408201356101b160e0840160c08501610d47565b156101d8576101d56101c66020850185610d1c565b84604001358560800135610528565b90505b604080518082018252601181527027b732a4b731b420b3b3b932b3b0ba37b960791b60208201529051630851f3bd60e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691630851f3bd9161024b91600401610d88565b602060405180830381865afa158015610268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028c9190610dbb565b905060006102c96102a06020870187610d1c565b6102b06040880160208901610d1c565b856060890135866102c460a08c018c610dd8565b6105f8565b90506102db60e0860160c08701610d47565b610300576102fd6102f26040870160208801610d1c565b828760800135610528565b90505b600061030f6020870187610d1c565b6001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161033a9190610cf3565b602060405180830381865afa158015610357573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037b9190610e25565b905080156103a5576103a5338261039560208a018a610d1c565b6001600160a01b031691906107c9565b6103ba338361039560408a0160208b01610d1c565b50949350505050565b3360009081526002602052604090205460ff166103f2576040516282b42960e81b815260040160405180910390fd5b60008181526001602052604090205460ff166104295760405163095f4a5160e01b8152600481018290526024015b60405180910390fd5b60008181526001602052604090819020805460ff19169055517f2b4584016031d9a0d1fc722a5f384f606370058bfcc1354c24264dbd139d67da906104719083815260200190565b60405180910390a150565b3360009081526002602052604090205460ff166104ab576040516282b42960e81b815260040160405180910390fd5b6104b4816107ed565b50565b6040516001600160a01b03808516602483015283166044820152606481018290526105229085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261086b565b50505050565b6000806105348361015d565b9050806105575760405163095f4a5160e01b815260048101849052602401610420565b60006105786105688561271061093d565b61057287876109a3565b90610a25565b905083156105e45760005461059a906001600160a01b038881169116836107c9565b600054604080518381526001600160a01b038981166020830152909216917f4756ac0011cd274810feab06c84b22207f6cf4374017214d7edbb4793e01b1dc910160405180910390a25b6105ee8582610a64565b9695505050505050565b600061060e6001600160a01b0389168588610aa6565b6000846001600160a01b0316848460405161062a929190610e3e565b6000604051808303816000865af19150503d8060008114610667576040519150601f19603f3d011682016040523d82523d6000602084013e61066c565b606091505b505090508061068e5760405163081ceff360e41b815260040160405180910390fd5b6040516370a0823160e01b81526001600160a01b038916906370a08231906106ba903090600401610cf3565b602060405180830381865afa1580156106d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fb9190610e25565b9150600080516020610f24833981519152868360405161071c929190610e4e565b60405180910390a1858210156107495785826040516324186c3f60e21b8152600401610420929190610e4e565b600080516020610f248339815191528683604051610768929190610e4e565b60405180910390a1876001600160a01b0316896001600160a01b03167f945805326745354040d87a85082ddbf37400ed05d6ffe9ae1452b4c5cfe2988389856040516107b5929190610e4e565b60405180910390a350979650505050505050565b6107e88363a9059cbb60e01b84846040516024016104eb929190610e5c565b505050565b60008181526001602052604090205460ff161561082057604051634552f1cf60e01b815260048101829052602401610420565b600081815260016020818152604092839020805460ff191690921790915590518281527fbc87ca7b5649466568014d9ee8ea80f5c5bda3313ef710f49c283aa88a7509339101610471565b60006108c0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610af59092919063ffffffff16565b8051909150156107e857808060200190518101906108de9190610e75565b6107e85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610420565b60008061094a8385610ea8565b90508381101561099a5760405162461bcd60e51b815260206004820152601b60248201527a536166654d6174683a206164646974696f6e206f766572666c6f7760281b6044820152606401610420565b90505b92915050565b6000826000036109b55750600061099d565b60006109c18385610ebb565b9050826109ce8583610ed2565b1461099a5760405162461bcd60e51b815260206004820152602160248201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6044820152607760f81b6064820152608401610420565b600061099a83836040518060400160405280601a815260200179536166654d6174683a206469766973696f6e206279207a65726f60301b815250610b0c565b600061099a83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250610b43565b6040516001600160a01b038316602482015260006044820152610ad690849063095ea7b360e01b906064016104eb565b6107e88363095ea7b360e01b84846040516024016104eb929190610e5c565b6060610b048484600085610b74565b949350505050565b60008183610b2d5760405162461bcd60e51b81526004016104209190610d88565b506000610b3a8486610ed2565b95945050505050565b60008184841115610b675760405162461bcd60e51b81526004016104209190610d88565b506000610b3a8486610ef4565b6060610b7f85610c67565b610bcb5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610420565b600080866001600160a01b03168587604051610be79190610f07565b60006040518083038185875af1925050503d8060008114610c24576040519150601f19603f3d011682016040523d82523d6000602084013e610c29565b606091505b50915091508115610c3d579150610b049050565b805115610c4d5780518082602001fd5b8360405162461bcd60e51b81526004016104209190610d88565b6000813f7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470818114801590610b04575050151592915050565b600060208284031215610cb257600080fd5b5035919050565b600060208284031215610ccb57600080fd5b81356001600160401b03811115610ce157600080fd5b820160e0818503121561099a57600080fd5b6001600160a01b0391909116815260200190565b6001600160a01b03811681146104b457600080fd5b600060208284031215610d2e57600080fd5b813561099a81610d07565b80151581146104b457600080fd5b600060208284031215610d5957600080fd5b813561099a81610d39565b60005b83811015610d7f578181015183820152602001610d67565b50506000910152565b6020815260008251806020840152610da7816040850160208701610d64565b601f01601f19169190910160400192915050565b600060208284031215610dcd57600080fd5b815161099a81610d07565b6000808335601e19843603018112610def57600080fd5b8301803591506001600160401b03821115610e0957600080fd5b602001915036819003821315610e1e57600080fd5b9250929050565b600060208284031215610e3757600080fd5b5051919050565b8183823760009101908152919050565b918252602082015260400190565b6001600160a01b03929092168252602082015260400190565b600060208284031215610e8757600080fd5b815161099a81610d39565b634e487b7160e01b600052601160045260246000fd5b8082018082111561099d5761099d610e92565b808202811582820484141761099d5761099d610e92565b600082610eef57634e487b7160e01b600052601260045260246000fd5b500490565b8181038181111561099d5761099d610e92565b60008251610f19818460208701610d64565b919091019291505056fecfe2b36dff205c560fb985b2c9220458365fa2dcafb12305e0c565e84b84255ba26469706673582212206248dd7804df7e252dd50b89a58ca80370a12b4d96582f1bcdd100141596f3ef64736f6c63430008120033","abi":[{"inputs":[{"internalType":"address","name":"authorisedCaller","type":"address"},{"internalType":"address","name":"feeBeneficiary","type":"address"},{"internalType":"uint256","name":"_initialFee","type":"uint256"},{"internalType":"address","name":"_registry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierAlreadyExists","type":"error"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierDoesNotExist","type":"error"},{"inputs":[{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"uint256","name":"received","type":"uint256"}],"name":"ReceivedLess","type":"error"},{"inputs":[],"name":"SwapFailed","type":"error"},{"inputs":[],"name":"Unauthorized","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"assetIn","type":"address"},{"indexed":true,"internalType":"address","name":"assetOut","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"AssetSwap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beneficiary","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"address","name":"token","type":"address"}],"name":"FeePaid","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"fee","type":"uint256"}],"name":"FeeTierRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"minimumPossible","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualAmount","type":"uint256"}],"name":"SlippageSaved","type":"event"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"addFeeTier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"authorizedAddresses","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeBase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"feeBeneficiaryAddress","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"feeTiers","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"fee","type":"uint256"}],"name":"removeFeeTier","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"fromAsset","type":"address"},{"internalType":"address","name":"toAsset","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"uint256","name":"receiveAtLeast","type":"uint256"},{"internalType":"uint256","name":"fee","type":"uint256"},{"internalType":"bytes","name":"withData","type":"bytes"},{"internalType":"bool","name":"collectFeeInFromToken","type":"bool"}],"internalType":"struct SwapData","name":"swapData","type":"tuple"}],"name":"swapTokens","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"feeId","type":"uint256"}],"name":"verifyFee","outputs":[{"internalType":"bool","name":"valid","type":"bool"}],"stateMutability":"view","type":"function"}]}